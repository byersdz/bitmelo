(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["bitmelo"] = factory();
	else
		root["bitmelo"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/libIndex.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Audio/Audio.js":
/*!****************************!*\
  !*** ./src/Audio/Audio.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Sound__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sound */ \"./src/Audio/Sound.js\");\n/* harmony import */ var _Frequencies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Frequencies */ \"./src/Audio/Frequencies.js\");\n\n\n\n/**\n * Handles playing of audio and adding audio data.\n */\nclass Audio {\n  constructor() {\n    /**\n     * The AudioContext used. Created in init.\n     */\n    this.context = null;\n\n    /**\n     * Array of sounds used, of the Sound class type.\n     * Add a sound from data using the addSound method.\n     */\n    this.sounds = [];\n\n    /**\n     * Time in second we should look ahead during update to add audio events to the context.\n     */\n    this.lookAheadTime = 0.05; // in seconds\n  }\n\n  /**\n   * Initialize the audio context. Called automatically by the Engine.\n   */\n  init() {\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\n    this.context = new AudioContext();\n  }\n\n  /**\n   * Update audio events. Called automatically by the Engine in the update loop.\n   */\n  update() {\n    let sound = null;\n    for ( let i = 0; i < this.sounds.length; i += 1 ) {\n      sound = this.sounds[i];\n      if ( sound.isPlayingInfiniteSound ) {\n        const lastScheduledTime = this.context.currentTime - sound.infiniteStartTime + this.lookAheadTime;\n        const totalNumberOfTics = Math.floor( lastScheduledTime / sound.infiniteTicDuration );\n        if ( totalNumberOfTics > sound.infiniteTicsPlayed ) {\n          let volumeTicIndex = 0;\n          let pitchTicIndex = 0;\n          let arpTicIndex = 0;\n          for ( let tic = sound.infiniteTicsPlayed + 1; tic <= totalNumberOfTics; tic += 1 ) {\n            const time = sound.infiniteStartTime + tic * sound.infiniteTicDuration;\n            volumeTicIndex = Audio.indexAtTic(\n              tic, sound.useVolumeLoop,\n              sound.volumeLoopStart,\n              sound.volumeLoopEnd,\n            );\n            pitchTicIndex = Audio.indexAtTic( tic, sound.usePitchLoop, sound.pitchLoopStart, sound.pitchLoopEnd );\n            arpTicIndex = Audio.indexAtTic( tic, sound.useArpLoop, sound.arpLoopStart, sound.arpLoopEnd );\n\n            const currentVolume = Audio.valueForVolume( sound.volumeTics[volumeTicIndex] ) * sound.infiniteVolume;\n\n            sound.infiniteGain.gain.linearRampToValueAtTime( currentVolume, time );\n            sound.infiniteOsc.detune.linearRampToValueAtTime( sound.pitchTics[pitchTicIndex] * sound.pitchScale, time );\n            const currentNote = sound.infiniteNote + sound.arpTics[arpTicIndex];\n            const currentFrequency = Audio.frequencyForNote( currentNote );\n            sound.infiniteOsc.frequency.setValueAtTime( currentFrequency, time );\n\n            sound.infiniteTicsPlayed = tic;\n          }\n\n          sound.lastVolumeTic = volumeTicIndex;\n          sound.lastPitchTic = pitchTicIndex;\n          sound.lastArpTic = arpTicIndex;\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a Sound instance to the sounds array from data.\n   * @param {*} soundData\n   */\n  addSound( soundData ) {\n    this.sounds.push( new _Sound__WEBPACK_IMPORTED_MODULE_0__[\"default\"]( soundData ) );\n    return this.sounds.length - 1;\n  }\n\n  /**\n   * Play a sound\n   * @param {*} soundIndex\n   * @param {*} note\n   * @param {*} duration\n   * @param {*} volume\n   * @param {*} speed\n   */\n  playSound( soundIndex, note, duration = 32, volume = 1, speed = 0 ) {\n    if ( soundIndex >= this.sounds.length || soundIndex < 0 ) {\n      console.error( 'Invalid sound index' );\n      return;\n    }\n\n    if ( duration < 0 ) {\n      this.playInfiniteSound( soundIndex, note, volume, speed );\n      return;\n    }\n\n    const sound = this.sounds[soundIndex];\n\n    const osc = this.context.createOscillator();\n    osc.type = Audio.oscTypeForWaveValue( sound.wave );\n\n    const ticDuration = Audio.ticDurationForSpeedValue( speed );\n\n    osc.frequency.value = Audio.frequencyForNote( note );\n\n    const gainNode = this.context.createGain();\n\n    const initialVolume = Audio.valueForVolume( sound.volumeTics[0] ) * volume;\n    gainNode.gain.setValueAtTime( initialVolume, this.context.currentTime );\n\n    osc.detune.setValueAtTime( sound.pitchTics[0] * sound.pitchScale, this.context.currentTime );\n\n    for ( let tic = 1; tic < duration; tic += 1 ) {\n      const time = this.context.currentTime + tic * ticDuration;\n      const volumeTicIndex = Audio.indexAtTic( tic, sound.useVolumeLoop, sound.volumeLoopStart, sound.volumeLoopEnd );\n      const pitchTicIndex = Audio.indexAtTic( tic, sound.usePitchLoop, sound.pitchLoopStart, sound.pitchLoopEnd );\n      const arpTicIndex = Audio.indexAtTic( tic, sound.useArpLoop, sound.arpLoopStart, sound.arpLoopEnd );\n      const currentVolume = Audio.valueForVolume( sound.volumeTics[volumeTicIndex] ) * volume;\n      gainNode.gain.linearRampToValueAtTime( currentVolume, time );\n      osc.detune.linearRampToValueAtTime( sound.pitchTics[pitchTicIndex] * sound.pitchScale, time );\n      const currentNote = note + sound.arpTics[arpTicIndex];\n      const currentFrequency = Audio.frequencyForNote( currentNote );\n      osc.frequency.setValueAtTime( currentFrequency, time );\n    }\n    const stopTime = this.context.currentTime + ( duration * ticDuration ) + ( sound.releaseLength * ticDuration );\n\n    if ( sound.releaseMode === _Sound__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RELEASE_EXPO ) {\n      gainNode.gain.exponentialRampToValueAtTime( 0, stopTime );\n    }\n    else {\n      // default to linear\n      gainNode.gain.linearRampToValueAtTime( 0, stopTime );\n    }\n    osc.connect( gainNode ).connect( this.context.destination );\n    osc.start();\n\n    osc.stop( stopTime );\n  }\n\n  /**\n   * Stop a sound that is being played infinitely\n   * @param {*} soundIndex\n   */\n  stopInfiniteSound( soundIndex ) {\n    const sound = this.sounds[soundIndex];\n    if ( sound.isPlayingInfiniteSound ) {\n      const stopTime = this.context.currentTime + ( sound.releaseLength * sound.infiniteTicDuration );\n      if ( sound.releaseMode === _Sound__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RELEASE_EXPO ) {\n        sound.infiniteGain.gain.exponentialRampToValueAtTime( 0.0001, stopTime );\n      }\n      else {\n        // default to linear\n        sound.infiniteGain.gain.linearRampToValueAtTime( 0, stopTime );\n      }\n      sound.infiniteTicsPlayed = 0;\n      sound.infiniteOsc.stop( stopTime );\n      sound.isPlayingInfiniteSound = false;\n    }\n  }\n\n  /**\n   * Stop all infinitely playing sounds\n   */\n  stopAllInfiniteSounds() {\n    for ( let i = 0; i < this.sounds.length; i += 1 ) {\n      this.stopInfiniteSound( i );\n    }\n  }\n\n  /**\n   * Play a sound infinitely. Only one instance of a sound at each index can be played at a time.\n   * @param {*} soundIndex\n   * @param {*} note\n   * @param {*} volume\n   * @param {*} speed\n   */\n  playInfiniteSound( soundIndex, note, volume, speed ) {\n    const sound = this.sounds[soundIndex];\n    if ( sound.isPlayingInfiniteSound ) {\n      this.stopInfiniteSound( soundIndex );\n    }\n\n    sound.isPlayingInfiniteSound = true;\n    sound.infiniteStartTime = this.context.currentTime;\n    sound.infiniteOsc = this.context.createOscillator();\n    sound.infiniteTicDuration = Audio.ticDurationForSpeedValue( speed );\n    sound.infiniteGain = this.context.createGain();\n    sound.infiniteVolume = volume;\n    sound.infiniteNote = note;\n\n    sound.infiniteOsc.frequency.value = Audio.frequencyForNote( note );\n    sound.infiniteOsc.type = Audio.oscTypeForWaveValue( sound.wave );\n\n    const initialVolume = Audio.valueForVolume( sound.volumeTics[0] ) * volume;\n    sound.infiniteGain.gain.setValueAtTime( initialVolume, this.context.currentTime );\n\n    sound.infiniteOsc.connect( sound.infiniteGain ).connect( this.context.destination );\n    sound.infiniteOsc.start();\n  }\n\n  /**\n   * Get the frequency in hertz for a note number.\n   * @param {*} note\n   */\n  static frequencyForNote( note ) {\n    let trimmedNote = note;\n    if ( trimmedNote < 0 ) {\n      trimmedNote = 0;\n    }\n    else if ( trimmedNote >= _Frequencies__WEBPACK_IMPORTED_MODULE_1__[\"default\"].length ) {\n      trimmedNote = _Frequencies__WEBPACK_IMPORTED_MODULE_1__[\"default\"].length - 1;\n    }\n    return _Frequencies__WEBPACK_IMPORTED_MODULE_1__[\"default\"][trimmedNote];\n  }\n\n  /**\n   * Get the duration in seconds for a tic at a given speed number.\n   * @param {*} speed\n   */\n  static ticDurationForSpeedValue( speed ) {\n    return Audio.fullDurationForSpeedValue( speed ) / Audio.TICS_PER_SOUND;\n  }\n\n  /**\n   * Get the total length of a sound in seconds for a given speed number\n   * @param {*} speed\n   */\n  static fullDurationForSpeedValue( speed ) {\n    switch ( speed ) {\n      case -1:\n        return 1.5;\n      case -2:\n        return 2;\n      case -3:\n        return 2.5;\n      case -4:\n        return 3;\n      case 1:\n        return 0.75;\n      case 2:\n        return 0.5;\n      case 3:\n        return 0.25;\n      default:\n        return 1;\n    }\n  }\n\n  /**\n   * Get the wave type for a wave index\n   * @param {*} waveValue\n   */\n  static oscTypeForWaveValue( waveValue ) {\n    switch ( waveValue ) {\n      case 0:\n        return 'sine';\n      case 1:\n        return 'triangle';\n      case 2:\n        return 'square';\n      case 3:\n        return 'sawtooth';\n      default:\n        return 'sine';\n    }\n  }\n\n  /**\n   * Get a 0 - 1 volume value for a 0 - 15 value used by the Sound class.\n   * @param {*} volume\n   */\n  static valueForVolume( volume ) {\n    const normalizedValue = volume / 15;\n    return normalizedValue ** 2.5;\n  }\n\n  /**\n   * Get the current tic index, taking into account looping.\n   * @param {*} tic\n   * @param {*} useLoop\n   * @param {*} loopStart\n   * @param {*} loopEnd\n   */\n  static indexAtTic( tic, useLoop, loopStart, loopEnd ) {\n    if ( !useLoop || loopStart < 0 || loopEnd < loopStart ) {\n      // no looping\n      if ( tic < 0 ) {\n        return 0;\n      }\n\n      if ( tic >= Audio.TICS_PER_SOUND ) {\n        return Audio.TICS_PER_SOUND - 1;\n      }\n\n      return tic;\n    }\n\n    if ( tic <= loopEnd ) {\n      // not looping yet\n      return tic;\n    }\n\n    const loopLength = loopEnd - loopStart + 1;\n    const loopAdd = ( tic - loopStart ) % loopLength;\n\n    return loopStart + loopAdd;\n  }\n}\n\nAudio.TICS_PER_SOUND = 32;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Audio);\n\n\n//# sourceURL=webpack://bitmelo/./src/Audio/Audio.js?");

/***/ }),

/***/ "./src/Audio/Frequencies.js":
/*!**********************************!*\
  !*** ./src/Audio/Frequencies.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Notes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Notes */ \"./src/Audio/Notes.js\");\n\n\n\n/**\n * Array of Frequency values for notes.\n */\nconst Frequencies = new Array( 108 );\n\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].C0] = 16.35160;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Cs0] = 17.32391;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].D0] = 18.35405;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Ds0] = 19.44544;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].E0] = 20.60172;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].F0] = 21.82676;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Fs0] = 23.12465;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].G0] = 24.49971;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Gs0] = 25.95654;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].A0] = 27.50000;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].As0] = 29.13524;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].B0] = 30.86771;\n\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].C1] = 32.70320;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Cs1] = 34.64783;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].D1] = 36.70810;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Ds1] = 38.89087;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].E1] = 41.20344;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].F1] = 43.65353;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Fs1] = 46.24930;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].G1] = 48.99943;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Gs1] = 51.91309;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].A1] = 55.00000;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].As1] = 58.27047;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].B1] = 61.73541;\n\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].C2] = 65.40639;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Cs2] = 69.29566;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].D2] = 73.41619;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Ds2] = 77.78175;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].E2] = 82.40689;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].F2] = 87.30706;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Fs2] = 92.49861;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].G2] = 97.99886;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Gs2] = 103.8262;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].A2] = 110.0000;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].As2] = 116.5409;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].B2] = 123.4708;\n\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].C3] = 130.8128;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Cs3] = 138.5913;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].D3] = 146.8324;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Ds3] = 155.5635;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].E3] = 164.8138;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].F3] = 174.6141;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Fs3] = 184.9972;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].G3] = 195.9977;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Gs3] = 207.6523;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].A3] = 220.0000;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].As3] = 233.0819;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].B3] = 246.9417;\n\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].C4] = 261.6256;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Cs4] = 277.1826;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].D4] = 293.6648;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Ds4] = 311.1270;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].E4] = 329.6276;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].F4] = 349.2282;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Fs4] = 369.9944;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].G4] = 391.9954;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Gs4] = 415.3047;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].A4] = 440.0000;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].As4] = 466.1638;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].B4] = 493.8833;\n\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].C5] = 523.2511;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Cs5] = 554.3653;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].D5] = 587.3295;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Ds5] = 622.2540;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].E5] = 659.2551;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].F5] = 698.4565;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Fs5] = 739.9888;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].G5] = 783.9909;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Gs5] = 830.6094;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].A5] = 880.0000;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].As5] = 932.3275;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].B5] = 987.7666;\n\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].C6] = 1046.502;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Cs6] = 1108.731;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].D6] = 1174.659;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Ds6] = 1244.508;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].E6] = 1318.510;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].F6] = 1396.913;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Fs6] = 1479.978;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].G6] = 1567.982;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Gs6] = 1661.219;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].A6] = 1760.000;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].As6] = 1864.655;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].B6] = 1975.533;\n\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].C7] = 2093.005;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Cs7] = 2217.461;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].D7] = 2349.318;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Ds7] = 2489.016;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].E7] = 2637.020;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].F7] = 2793.826;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Fs7] = 2959.955;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].G7] = 3135.963;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Gs7] = 3322.438;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].A7] = 3520.000;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].As7] = 3729.310;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].B7] = 3951.066;\n\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].C8] = 4186.009;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Cs8] = 4434.922;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].D8] = 4698.636;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Ds8] = 4978.032;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].E8] = 5274.041;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].F8] = 5587.652;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Fs8] = 5919.911;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].G8] = 6271.927;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Gs8] = 6644.875;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].A8] = 7040.000;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].As8] = 7458.620;\nFrequencies[_Notes__WEBPACK_IMPORTED_MODULE_0__[\"default\"].B8] = 7902.133;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Frequencies);\n\n\n//# sourceURL=webpack://bitmelo/./src/Audio/Frequencies.js?");

/***/ }),

/***/ "./src/Audio/Notes.js":
/*!****************************!*\
  !*** ./src/Audio/Notes.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object mapping Node identifiers to numbers. AKA Notes.C4 = 48\n */\nconst Notes = {};\n\nNotes.C0 = 0;\nNotes.Cs0 = 1;\nNotes.Db0 = 1;\nNotes.D0 = 2;\nNotes.Ds0 = 3;\nNotes.Eb0 = 3;\nNotes.E0 = 4;\nNotes.F0 = 5;\nNotes.Fs0 = 6;\nNotes.Gb0 = 6;\nNotes.G0 = 7;\nNotes.Gs0 = 8;\nNotes.Ab0 = 8;\nNotes.A0 = 9;\nNotes.As0 = 10;\nNotes.Bb0 = 10;\nNotes.B0 = 11;\n\nNotes.C1 = 12;\nNotes.Cs1 = 13;\nNotes.Db1 = 13;\nNotes.D1 = 14;\nNotes.Ds1 = 15;\nNotes.Eb1 = 15;\nNotes.E1 = 16;\nNotes.F1 = 17;\nNotes.Fs1 = 18;\nNotes.Gb1 = 18;\nNotes.G1 = 19;\nNotes.Gs1 = 20;\nNotes.Ab1 = 20;\nNotes.A1 = 21;\nNotes.As1 = 22;\nNotes.Bb1 = 22;\nNotes.B1 = 23;\n\nNotes.C2 = 24;\nNotes.Cs2 = 25;\nNotes.Db2 = 25;\nNotes.D2 = 26;\nNotes.Ds2 = 27;\nNotes.Eb2 = 27;\nNotes.E2 = 28;\nNotes.F2 = 29;\nNotes.Fs2 = 30;\nNotes.Gb2 = 30;\nNotes.G2 = 31;\nNotes.Gs2 = 32;\nNotes.Ab2 = 32;\nNotes.A2 = 33;\nNotes.As2 = 34;\nNotes.Bb2 = 34;\nNotes.B2 = 35;\n\nNotes.C3 = 36;\nNotes.Cs3 = 37;\nNotes.Db3 = 37;\nNotes.D3 = 38;\nNotes.Ds3 = 39;\nNotes.Eb3 = 39;\nNotes.E3 = 40;\nNotes.F3 = 41;\nNotes.Fs3 = 42;\nNotes.Gb3 = 42;\nNotes.G3 = 43;\nNotes.Gs3 = 44;\nNotes.Ab3 = 44;\nNotes.A3 = 45;\nNotes.As3 = 46;\nNotes.Bb3 = 46;\nNotes.B3 = 47;\n\nNotes.C4 = 48;\nNotes.Cs4 = 49;\nNotes.Db4 = 49;\nNotes.D4 = 50;\nNotes.Ds4 = 51;\nNotes.Eb4 = 51;\nNotes.E4 = 52;\nNotes.F4 = 53;\nNotes.Fs4 = 54;\nNotes.Gb4 = 54;\nNotes.G4 = 55;\nNotes.Gs4 = 56;\nNotes.Ab4 = 56;\nNotes.A4 = 57;\nNotes.As4 = 58;\nNotes.Bb4 = 58;\nNotes.B4 = 59;\n\nNotes.C5 = 60;\nNotes.Cs5 = 61;\nNotes.Db5 = 61;\nNotes.D5 = 62;\nNotes.Ds5 = 63;\nNotes.Eb5 = 63;\nNotes.E5 = 64;\nNotes.F5 = 65;\nNotes.Fs5 = 66;\nNotes.Gb5 = 66;\nNotes.G5 = 67;\nNotes.Gs5 = 68;\nNotes.Ab5 = 68;\nNotes.A5 = 69;\nNotes.As5 = 70;\nNotes.Bb5 = 70;\nNotes.B5 = 71;\n\nNotes.C6 = 72;\nNotes.Cs6 = 73;\nNotes.Db6 = 73;\nNotes.D6 = 74;\nNotes.Ds6 = 75;\nNotes.Eb6 = 75;\nNotes.E6 = 76;\nNotes.F6 = 77;\nNotes.Fs6 = 78;\nNotes.Gb6 = 78;\nNotes.G6 = 79;\nNotes.Gs6 = 80;\nNotes.Ab6 = 80;\nNotes.A6 = 81;\nNotes.As6 = 82;\nNotes.Bb6 = 82;\nNotes.B6 = 83;\n\nNotes.C7 = 84;\nNotes.Cs7 = 85;\nNotes.Db7 = 85;\nNotes.D7 = 86;\nNotes.Ds7 = 87;\nNotes.Eb7 = 87;\nNotes.E7 = 88;\nNotes.F7 = 89;\nNotes.Fs7 = 90;\nNotes.Gb7 = 90;\nNotes.G7 = 91;\nNotes.Gs7 = 92;\nNotes.Ab7 = 92;\nNotes.A7 = 93;\nNotes.As7 = 94;\nNotes.Bb7 = 94;\nNotes.B7 = 95;\n\nNotes.C8 = 96;\nNotes.Cs8 = 97;\nNotes.Db8 = 97;\nNotes.D8 = 98;\nNotes.Ds8 = 99;\nNotes.Eb8 = 99;\nNotes.E8 = 100;\nNotes.F8 = 101;\nNotes.Fs8 = 102;\nNotes.Gb8 = 102;\nNotes.G8 = 103;\nNotes.Gs8 = 104;\nNotes.Ab8 = 104;\nNotes.A8 = 105;\nNotes.As8 = 106;\nNotes.Bb8 = 106;\nNotes.B8 = 107;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Notes);\n\n\n//# sourceURL=webpack://bitmelo/./src/Audio/Notes.js?");

/***/ }),

/***/ "./src/Audio/Sound.js":
/*!****************************!*\
  !*** ./src/Audio/Sound.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Represents a sound that can be played.\n */\nclass Sound {\n  constructor( data ) {\n    /**\n     * Array of volume values for the duration of the sound.\n     * Each value must be 0 to 15.\n     * Length of the array must always be 32.\n     */\n    this.volumeTics = new Int8Array( 32 );\n\n    /**\n     * Array of pitch values for the duration of the sound.\n     * Each value must be -10 to 10.\n     * Length of the array must always be 32.\n     */\n    this.pitchTics = new Int8Array( 32 );\n\n    /**\n     * Array of arp values for the duration of the sound.\n     * Each value is the number of notes above or below the note of the sound.\n     * Length of the array must always be 32.\n     */\n    this.arpTics = new Int8Array( 32 );\n\n    /**\n     * Should we loop over the volumeTics when playing a sound?\n     * If false the last volume tic will be played infinitely once reaching it.\n     */\n    this.useVolumeLoop = false;\n\n    /**\n     * The volumeTics index we will start looping at if useVolumeLoop is true.\n     */\n    this.volumeLoopStart = -1;\n\n    /**\n     * The volumeTics index we will stop looping at if useVolumeLoop is true.\n     */\n    this.volumeLoopEnd = -1;\n\n    /**\n     * Should we loop over the pitchTics when playing a sound?\n     * If false the last pitch tic will be played infinitely once reaching it.\n     */\n    this.usePitchLoop = false;\n\n    /**\n     * The pitchTics index we will start looping at if usePitchLoop is true.\n     */\n    this.pitchLoopStart = -1;\n\n    /**\n     * The pitchTics index we will stop looping at if usePitchLoop is true.\n     */\n    this.pitchLoopEnd = -1;\n\n    /**\n     * Should we loop over the arpTics when playing a sound?\n     * If false the last arp tic will be played infinitely once reaching it.\n     */\n    this.useArpLoop = false;\n\n    /**\n     * The arpTics index we will start looping at if useArpLoop is true.\n     */\n    this.arpLoopStart = -1;\n\n    /**\n     * The arpTics index we will stop looping at id useArpLoop is true.\n     */\n    this.arpLoopEnd = -1;\n\n    /**\n     * The Wave index used by this sound.\n     * 0 is Sine.\n     * 1 is Triangle.\n     * 2 is Square.\n     * 3 is Sawtooth.\n     */\n    this.wave = 0;\n\n    /**\n     * The pitch scale used by the pitchTics. Value is in cents.\n     */\n    this.pitchScale = 10;\n\n    /**\n     * Number of tics to ramp down playing of the sound.\n     * Must always be at least 1.\n     */\n    this.releaseLength = 1;\n\n    /**\n     * The ramp type used when ramping down after stopping a sound.\n     * 'linear' uses a linear ramp\n     * 'expo' uses an exponential ramp\n     */\n    this.releaseMode = Sound.RELEASE_LINEAR;\n\n    /**\n     * Is an infinite sound currently playing on this sound?\n     */\n    this.isPlayingInfiniteSound = false;\n\n    /**\n     * The start time of the current infinite sound.\n     */\n    this.infiniteStartTime = 0;\n\n    /**\n     * The oscillator node of the current infinite sound.\n     */\n    this.infiniteOsc = null;\n\n    /**\n     * The gain node of the current infinite sound.\n     */\n    this.infiniteGain = null;\n\n    /**\n     * The duration of a tic in the current infinite sound.\n     */\n    this.infiniteTicDuration = 0;\n\n    /**\n     * The number of tics played in the current infinite sound.\n     */\n    this.infiniteTicsPlayed = 0;\n\n    /**\n     * The volume of the current infinite sound.\n     */\n    this.infiniteVolume = 0;\n\n    /**\n     * The note of the current infinite sound.\n     */\n    this.infiniteNote = 0;\n\n    /**\n     * The last volume tic played.\n     */\n    this.lastVolumeTic = 0;\n\n    /**\n     * The last pitch tic played.\n     */\n    this.lastPitchTic = 0;\n\n    /**\n     * The last arp tic played.\n     */\n    this.lastArpTic = 0;\n\n    if ( data ) {\n      const {\n        volumeTics,\n        pitchTics,\n        arpTics,\n        wave,\n        pitchScale,\n        releaseLength,\n        releaseMode,\n        useVolumeLoop,\n        volumeLoopStart,\n        volumeLoopEnd,\n        usePitchLoop,\n        pitchLoopStart,\n        pitchLoopEnd,\n        useArpLoop,\n        arpLoopStart,\n        arpLoopEnd,\n      } = data;\n\n      if ( volumeTics && Array.isArray( volumeTics ) ) {\n        for ( let i = 0; i < volumeTics.length; i += 1 ) {\n          this.volumeTics[i] = volumeTics[i];\n        }\n      }\n\n      if ( pitchTics && Array.isArray( pitchTics ) ) {\n        for ( let i = 0; i < pitchTics.length; i += 1 ) {\n          this.pitchTics[i] = pitchTics[i];\n        }\n      }\n\n      if ( arpTics && Array.isArray( arpTics ) ) {\n        for ( let i = 0; i < arpTics.length; i += 1 ) {\n          this.arpTics[i] = arpTics[i];\n        }\n      }\n\n      this.wave = wave;\n      this.pitchScale = pitchScale;\n      this.releaseLength = releaseLength;\n      this.releaseMode = releaseMode;\n      this.useVolumeLoop = useVolumeLoop;\n      this.volumeLoopStart = volumeLoopStart;\n      this.volumeLoopEnd = volumeLoopEnd;\n      this.usePitchLoop = usePitchLoop;\n      this.pitchLoopStart = pitchLoopStart;\n      this.pitchLoopEnd = pitchLoopEnd;\n      this.useArpLoop = useArpLoop;\n      this.arpLoopStart = arpLoopStart;\n      this.arpLoopEnd = arpLoopEnd;\n    }\n  }\n}\n\nSound.RELEASE_LINEAR = 'linear';\nSound.RELEASE_EXPO = 'expo';\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Sound);\n\n\n//# sourceURL=webpack://bitmelo/./src/Audio/Sound.js?");

/***/ }),

/***/ "./src/ConvertData/ConvertData.js":
/*!****************************************!*\
  !*** ./src/ConvertData/ConvertData.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lz_string_libs_lz_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lz-string/libs/lz-string */ \"./src/lz-string/libs/lz-string.js\");\n/* harmony import */ var _lz_string_libs_lz_string__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lz_string_libs_lz_string__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nclass ConvertData {\n  static arrayToRun( array ) {\n    const result = [];\n    let currentValue = array[0];\n    let runNumber = 0;\n\n    for ( let i = 0; i < array.length; i += 1 ) {\n      if ( array[i] === currentValue ) {\n        runNumber += 1;\n      }\n      else {\n        result.push( runNumber );\n        result.push( currentValue );\n        runNumber = 1;\n        currentValue = array[i];\n      }\n    }\n    // add the last item\n    result.push( runNumber );\n    result.push( currentValue );\n    return result;\n  }\n\n  static runToArray( runArray ) {\n    const result = [];\n    let runPosition = 0;\n    while ( runPosition < runArray.length ) {\n      const runLength = runArray[runPosition];\n      const item = runArray[runPosition + 1];\n      for ( let j = 0; j < runLength; j += 1 ) {\n        result.push( item );\n      }\n      runPosition += 2;\n    }\n\n    return result;\n  }\n\n  static arrayToCompressedString( array ) {\n    const arrayString = array.join( ',' );\n    const compressed = _lz_string_libs_lz_string__WEBPACK_IMPORTED_MODULE_0___default.a.compressToEncodedURIComponent( arrayString );\n    return compressed;\n  }\n\n  static compressedStringToArray( compressedString ) {\n    const decompressedString = _lz_string_libs_lz_string__WEBPACK_IMPORTED_MODULE_0___default.a.decompressFromEncodedURIComponent( compressedString );\n    const stringArray = decompressedString.split( ',' );\n    const result = [];\n    for ( let i = 0; i < stringArray.length; i += 1 ) {\n      result.push( Number.parseInt( stringArray[i], 10 ) );\n    }\n    return result;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ConvertData);\n\n\n//# sourceURL=webpack://bitmelo/./src/ConvertData/ConvertData.js?");

/***/ }),

/***/ "./src/ConvertProject/ConvertProject.js":
/*!**********************************************!*\
  !*** ./src/ConvertProject/ConvertProject.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ConvertData/ConvertData */ \"./src/ConvertData/ConvertData.js\");\n\n\nclass ConvertProject {\n  static convertProjectTilemaps( projectTilemaps ) {\n    const tilemaps = [];\n\n    for ( let i = 0; i < projectTilemaps.length; i += 1 ) {\n      const tilemap = {};\n      tilemap.width = projectTilemaps[i].width;\n      tilemap.height = projectTilemaps[i].height;\n      tilemap.name = projectTilemaps[i].name;\n      tilemap.layers = [];\n\n      for ( let j = 0; j < projectTilemaps[i].layers.length; j += 1 ) {\n        const currentLayer = projectTilemaps[i].layers[j];\n        const format = currentLayer.format ? currentLayer.format : 'array';\n\n        if ( format === 'rc' ) {\n          // run and compressed string\n          const runData = _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_0__[\"default\"].compressedStringToArray( currentLayer.data );\n          tilemap.layers.push( _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_0__[\"default\"].runToArray( runData ) );\n        }\n        else if ( format === 'c' ) {\n          // compressed string\n          tilemap.layers.push( _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_0__[\"default\"].compressedStringToArray( currentLayer.data ) );\n        }\n        else if ( format === 'run' ) {\n          // run length encoding\n          tilemap.layers.push( _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_0__[\"default\"].runToArray( currentLayer.data ) );\n        }\n        else {\n          // array\n          tilemap.layers.push( ...[currentLayer.data] );\n        }\n      }\n\n      tilemaps.push( tilemap );\n    }\n\n    return tilemaps;\n  }\n\n  static convertProjectTilesets( projectTilesets, tileSize ) {\n    const tilesets = [];\n\n    for ( let i = 0; i < projectTilesets.length; i += 1 ) {\n      const currentProjectTileset = projectTilesets[i];\n      const tileset = {};\n      const layerData = [];\n\n      for ( let j = 0; j < currentProjectTileset.layers.length; j += 1 ) {\n        const currentLayer = currentProjectTileset.layers[j];\n        if ( currentLayer.isVisible ) {\n          let dataArray = null;\n\n          const format = currentLayer.format ? currentLayer.format : 'array';\n\n          if ( format === 'rc' ) {\n            // run and compressed string\n            const runArray = _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_0__[\"default\"].compressedStringToArray( currentLayer.data );\n            dataArray = ConvertProject.convertToTilesetArray(\n              _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_0__[\"default\"].runToArray( runArray ),\n              currentProjectTileset.width * tileSize,\n              currentProjectTileset.height * tileSize,\n              tileSize,\n            );\n          }\n          else if ( format === 'c' ) {\n            // compressed string\n            dataArray = ConvertProject.convertToTilesetArray(\n              _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_0__[\"default\"].compressedStringToArray( currentLayer.data ),\n              currentProjectTileset.width * tileSize,\n              currentProjectTileset.height * tileSize,\n              tileSize,\n            );\n          }\n          else if ( format === 'run' ) {\n            // run length encoding\n            dataArray = ConvertProject.convertToTilesetArray(\n              _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_0__[\"default\"].runToArray( currentLayer.data ),\n              currentProjectTileset.width * tileSize,\n              currentProjectTileset.height * tileSize,\n              tileSize,\n            );\n          }\n          else {\n            // array\n            dataArray = ConvertProject.convertToTilesetArray(\n              currentLayer.data,\n              currentProjectTileset.width * tileSize,\n              currentProjectTileset.height * tileSize,\n              tileSize,\n            );\n          }\n\n          layerData.push( dataArray );\n        }\n      }\n\n      // flatten the layer data into 1 layer, ignoring transparent pixels\n      if ( layerData.length > 0 ) {\n        tileset.data = new Array( layerData[0].length );\n        tileset.data.fill( 0 );\n        for ( let position = 0; position < layerData[0].length; position += 1 ) {\n          for ( let layer = 0; layer < layerData.length; layer += 1 ) {\n            const currentValue = layerData[layer][position];\n            if ( currentValue ) {\n              tileset.data[position] = currentValue;\n              break;\n            }\n          }\n        }\n      }\n      else {\n        tileset.data = new Array( currentProjectTileset.width * currentProjectTileset.height * tileSize * tileSize );\n        tileset.data.fill( 0 );\n      }\n\n      tileset.width = currentProjectTileset.width;\n      tileset.height = currentProjectTileset.height;\n      tileset.format = 'array';\n      tileset.name = 'test';\n      tileset.tileSize = tileSize;\n\n      tilesets.push( tileset );\n    }\n    return tilesets;\n  }\n\n  static convertToTilesetArray( sourceArray, width, height, tileSize ) {\n    const imageData = new Array( width * height );\n    const tileColumns = width / tileSize;\n\n    for ( let i = 0; i < sourceArray.length; i += 1 ) {\n      const x = i % width;\n      const y = Math.floor( i / width );\n      const tileX = Math.floor( x / tileSize );\n      const tileY = Math.floor( y / tileSize );\n\n      const iPerTile = tileSize * tileSize;\n      const startIndex = tileY * iPerTile * tileColumns + ( tileX * iPerTile ); // the starting index of the current tile\n\n      // relative x and y from the tile origin\n      const relativeX = x - ( tileX * tileSize );\n      const relativeY = y - ( tileY * tileSize );\n\n      const destinationIndex = startIndex + ( relativeY * tileSize ) + relativeX;\n      imageData[destinationIndex] = sourceArray[i];\n    }\n\n    return imageData;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ConvertProject);\n\n\n//# sourceURL=webpack://bitmelo/./src/ConvertProject/ConvertProject.js?");

/***/ }),

/***/ "./src/Engine/Engine.js":
/*!******************************!*\
  !*** ./src/Engine/Engine.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Screen_Screen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Screen/Screen */ \"./src/Screen/Screen.js\");\n/* harmony import */ var _Input_Input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Input/Input */ \"./src/Input/Input.js\");\n/* harmony import */ var _TileData_TileData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TileData/TileData */ \"./src/TileData/TileData.js\");\n/* harmony import */ var _MapData_MapData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../MapData/MapData */ \"./src/MapData/MapData.js\");\n/* harmony import */ var _FontData_FontData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../FontData/FontData */ \"./src/FontData/FontData.js\");\n/* harmony import */ var _Audio_Audio__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Audio/Audio */ \"./src/Audio/Audio.js\");\n/* harmony import */ var _ConvertProject_ConvertProject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ConvertProject/ConvertProject */ \"./src/ConvertProject/ConvertProject.js\");\n/* harmony import */ var _FontData_standard_font_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../FontData/standard.font.json */ \"./src/FontData/standard.font.json\");\nvar _FontData_standard_font_json__WEBPACK_IMPORTED_MODULE_7___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../FontData/standard.font.json */ \"./src/FontData/standard.font.json\", 1);\n/* harmony import */ var _FontData_small_font_json__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../FontData/small.font.json */ \"./src/FontData/small.font.json\");\nvar _FontData_small_font_json__WEBPACK_IMPORTED_MODULE_8___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../FontData/small.font.json */ \"./src/FontData/small.font.json\", 1);\n/* eslint-disable prefer-destructuring */\n\n\n\n\n\n\n\n\n\n\n\nclass Engine {\n  constructor() {\n    /**\n     * The id of the div that the engine will be contained by\n     */\n    this.containerId = 'bitmelo-container';\n\n    /**\n     * Function to be called when the engine is initialized\n     */\n    this.onInit = null;\n\n    /**\n     * Function to draw the initial screen when the engine loads.\n     * Only seen when clickToBegin is true\n     */\n    this.onDrawStartScreen = null;\n\n    /**\n     * Function to draw the transition frames after start click.\n     * Only seen when clickToBegin is true\n     */\n    this.onUpdateStartTransition = null;\n\n    /**\n     * Number of frames to show after begin click before the game starts.\n     * Only relevant when clickToBegin is true.\n     */\n    this.startTransitionFrames = 60;\n\n    /**\n     * Function to be called every update of the engine.\n     * Perform game logic and rendering here.\n     */\n    this.onUpdate = null;\n\n    /**\n     * Should we require the user to click the screen before the game starts?\n     * This stops a game from automatically starring in a web page which can be annoying.\n     */\n    this.clickToBegin = true;\n\n    /**\n     * Instance of the Screen class used by the Engine. Automatically created by the engine.\n     */\n    this.screen = new _Screen_Screen__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n    /**\n     * Instance of the Input class used by the Engine. Automatically created by the engine.\n     */\n    this.input = new _Input_Input__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\n    /**\n     * Instance of the TileData class used by the Engine. Automatically created by the engine\n     */\n    this.tileData = new _TileData_TileData__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n\n    /**\n     * Instance of the MapData class used by the Engine. Automatically created by the engine\n     */\n    this.mapData = new _MapData_MapData__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n    /**\n     * Instance of the FontData class used by the Engine. Automatically created by the engine.\n     * The Standard font is automatically added at index 0.\n     * The Small font is automatically added at index 1.\n     */\n    this.fontData = new _FontData_FontData__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n\n    /**\n     * Instance of the Audio class used by the Engine. Automatically created by the engine.\n     */\n    this.audio = new _Audio_Audio__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n\n    /**\n     * The number of seconds since init was called\n     */\n    this.realTimeSinceInit = 0;\n\n    /**\n     * The number of seconds since the game was started\n     */\n    this.realTimeSinceGameStart = 0;\n\n    this.fontData.addFont( _FontData_standard_font_json__WEBPACK_IMPORTED_MODULE_7__ );\n    this.fontData.addFont( _FontData_small_font_json__WEBPACK_IMPORTED_MODULE_8__ );\n\n    this._hasBegun = false;\n    this._update = this._update.bind( this );\n    this._initTime = 0;\n    this._gameStartTime = 0;\n  }\n\n  /**\n   * Add project data from the Bitmelo Editor to the engine\n   */\n  addProjectData( projectData ) {\n    let format = 'project';\n    if ( projectData.format ) {\n      format = projectData.format;\n    }\n\n    let project = null;\n    let sounds = null;\n    let tilesets = null;\n    let tilemaps = null;\n    let palette = null;\n\n    if ( format === 'transfer' ) {\n      project = projectData.project;\n      sounds = projectData.sounds;\n      tilesets = projectData.tilesets;\n      tilemaps = projectData.tilemaps;\n      palette = projectData.palette;\n    }\n    else {\n      project = projectData.project;\n      sounds = projectData.sound.sounds;\n      tilesets = projectData.tileset.tilesets;\n      tilemaps = projectData.tilemap.tilemaps;\n      palette = projectData.palette;\n    }\n\n    // engine settings\n    this.clickToBegin = project.misc.clickToBegin;\n    this.startTransitionFrames = project.misc.startTransitionFrames;\n\n    // screen settings\n    this.screen.width = project.screen.width;\n    this.screen.height = project.screen.height;\n    this.screen.scaleMode = project.screen.scaleMode;\n    this.screen.scale = project.screen.scale;\n    this.screen.minScale = project.screen.minScale;\n    this.screen.maxScale = project.screen.maxScale;\n    this.screen.horizontalScaleCushion = project.screen.horizontalScaleCushion;\n    this.screen.verticalScaleCushion = project.screen.verticalScaleCushion;\n    this.screen.rescaleOnWindowResize = project.screen.rescaleOnWindowResize;\n    this.screen.hideCursor = project.misc.hideCursor;\n    this.screen.setPalette( palette.colors );\n\n    // tilesets\n    this.tileData.tileSize = project.tileSize;\n    const convertedTilesets = _ConvertProject_ConvertProject__WEBPACK_IMPORTED_MODULE_6__[\"default\"].convertProjectTilesets( tilesets, project.tileSize );\n    for ( let i = 0; i < convertedTilesets.length; i += 1 ) {\n      this.tileData.addTileset( convertedTilesets[i] );\n    }\n\n    // tilemaps\n    const convertedTilemaps = _ConvertProject_ConvertProject__WEBPACK_IMPORTED_MODULE_6__[\"default\"].convertProjectTilemaps( tilemaps );\n    for ( let i = 0; i < convertedTilemaps.length; i += 1 ) {\n      this.mapData.addTileMap( convertedTilemaps[i] );\n    }\n\n    // sounds\n    for ( let i = 0; i < sounds.length; i += 1 ) {\n      this.audio.addSound( sounds[i] );\n    }\n  }\n\n  /**\n   * Begin running the engine. This will perform initial setup, call the onInit function, and begin the game loop\n   */\n  begin() {\n    const date = new Date();\n    this._initTime = date.getTime();\n    if ( this.onInit ) {\n      this.onInit();\n    }\n\n    this.screen.conainerId = this.containerId;\n    this.screen.init();\n    this.screen.onScaleChange = ( scale ) => {\n      this.input.canvasScale = scale;\n    };\n\n    this.input.canvas = this.screen.canvas;\n    this.input.canvasScale = this.screen.scale;\n    this.input.screenWidth = this.screen.width;\n    this.input.screenHeight = this.screen.height;\n    this.input.init();\n    this.tileData.init();\n    this.screen.tileData = this.tileData;\n    this.screen.mapData = this.mapData;\n    this.screen.fontData = this.fontData;\n\n    if ( this.clickToBegin ) {\n      if ( this.onDrawStartScreen ) {\n        this.onDrawStartScreen();\n      }\n      else {\n        this.screen.clear( 1 );\n        this.screen.drawText( 'Click to begin...', 10, 10, 2, 1, 0 );\n      }\n      const screenHidesCursor = this.screen.hideCursor;\n      this.screen.hideCursor = false;\n      this.screen._setCanvasStyle();\n      this.screen.drawScreen();\n      this.screen.canvas.addEventListener( 'click', () => {\n        if ( !this._hasBegun ) {\n          this._hasBegun = true;\n          this.screen.hideCursor = screenHidesCursor;\n          this.screen._setCanvasStyle();\n          this.audio.init();\n          this.input.clearInput();\n          requestAnimationFrame( this._update );\n        }\n      } );\n    }\n    else {\n      this._gameStartTime = date.getTime();\n      this._hasBegun = true;\n      this.audio.init();\n      requestAnimationFrame( this._update );\n    }\n  }\n\n  /**\n   * Game loop\n   */\n  _update() {\n    const date = new Date();\n    const msSinceInit = date.getTime() - this._initTime;\n    this.realTimeSinceInit = msSinceInit / 1000;\n\n    this.input.pollInput();\n\n    // the first game frame after transition\n    if ( this.clickToBegin && this.startTransitionFrames === 0 ) {\n      this._gameStartTime = date.getTime();\n      this.startTransitionFrames -= 1;\n    }\n\n    if ( this.clickToBegin && this.startTransitionFrames > 0 ) {\n      this.startTransitionFrames -= 1;\n\n      if ( this.onUpdateStartTransition ) {\n        this.clearInput();\n        this.onUpdateStartTransition();\n      }\n      else {\n        this.screen.clear( 1 );\n      }\n    }\n    else if ( this.onUpdate ) {\n      this.realTimeSinceGameStart = ( date.getTime() - this._gameStartTime ) / 1000;\n      this.onUpdate();\n      this.audio.update();\n    }\n\n    this.screen.drawScreen();\n    requestAnimationFrame( this._update );\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Engine);\n\n\n//# sourceURL=webpack://bitmelo/./src/Engine/Engine.js?");

/***/ }),

/***/ "./src/FontData/Font.js":
/*!******************************!*\
  !*** ./src/FontData/Font.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Represents a font. Data is stored similarly to tilesets in an array, with the ability to remap characters\n * that have a unicode point larger than the array can hold.\n */\nclass Font {\n  constructor( fontData ) {\n    /**\n     * The standard width for a character. Used as the default if none is specified for a character.\n     */\n    this.standardWidth = 5;\n\n    /**\n     * Number of pixels between each character\n     */\n    this.letterSpacing = 1;\n\n    /**\n     * The tile size of the tile sheet where the characters are drawn\n     */\n    this.tileSize = 16;\n\n    /**\n     * The number of columns in the tile sheet\n     */\n    this.width = 16;\n\n    /**\n     * The number of rows in the tile sheet\n     */\n    this.height = 16;\n\n    /**\n     * The x origin in pixels of the character relative to the bottom left.\n     */\n    this.originX = 1;\n\n    /**\n     * The y origin in pixels of the character relative to the bottom left.\n     */\n    this.originY = 3;\n\n    /**\n     * Object mapping unicode points to character information.\n     * Used for changing a characters size or remapping unicode points larger than what fits on the tile sheet.\n     */\n    this.charData = null;\n\n    /**\n     * Uint8ClampedArray of the tile sheet data.\n     * Generated by the constructor.\n     */\n    this.data = null;\n\n    if ( fontData ) {\n      this.standardWidth = fontData.standardWidth;\n      this.letterSpacing = fontData.letterSpacing;\n\n      this.tileSize = fontData.tileSize;\n      this.width = fontData.width;\n      this.height = fontData.height;\n      this.originX = fontData.originX;\n      this.originY = fontData.originY;\n      this.charData = fontData.charData;\n\n      this.data = new Uint8ClampedArray( this.width * this.height * this.tileSize * this.tileSize );\n      const { data } = fontData;\n      let runPosition = 0;\n      let dataPosition = 0;\n      while ( runPosition < data.length ) {\n        const runLength = data[runPosition];\n        const paletteId = parseInt( data[runPosition + 1], 10 );\n        for ( let j = 0; j < runLength; j += 1 ) {\n          this.data[dataPosition] = paletteId;\n          dataPosition += 1;\n        }\n        runPosition += 2;\n      }\n    }\n  }\n\n  /**\n   * Get the base index in the data array for the character\n   * @param {number} charCode - the unicode point for the character\n   */\n  baseIndexForChar( charCode ) {\n    let codePoint = charCode;\n    if ( charCode >= this.width * this.height ) {\n      const key = charCode.toString();\n\n      if ( this.charData && this.charData[key] ) {\n        if ( this.charData[key] !== undefined ) {\n          codePoint = this.charData[key].remap;\n        }\n      }\n    }\n    return codePoint * this.tileSize * this.tileSize;\n  }\n\n  /**\n   * Get the width of a character\n   * @param {number} charCode - the unicode point for the character\n   */\n  widthForChar( charCode ) {\n    const charKey = charCode.toString();\n    if ( this.charData && this.charData[charKey] ) {\n      if ( this.charData[charKey].width !== undefined ) {\n        return this.charData[charKey].width;\n      }\n    }\n    return this.standardWidth;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Font);\n\n\n//# sourceURL=webpack://bitmelo/./src/FontData/Font.js?");

/***/ }),

/***/ "./src/FontData/FontData.js":
/*!**********************************!*\
  !*** ./src/FontData/FontData.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Font */ \"./src/FontData/Font.js\");\n\n\n\n/**\n * Holds all of the font data\n */\nclass FontData {\n  constructor() {\n    /**\n     * Array of Font objects\n     */\n    this.fonts = [];\n  }\n\n  /**\n   * Add a Font to this.fonts from font data\n   * @param {*} fontData\n   */\n  addFont( fontData ) {\n    this.fonts.push( new _Font__WEBPACK_IMPORTED_MODULE_0__[\"default\"]( fontData ) );\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (FontData);\n\n\n//# sourceURL=webpack://bitmelo/./src/FontData/FontData.js?");

/***/ }),

/***/ "./src/FontData/small.font.json":
/*!**************************************!*\
  !*** ./src/FontData/small.font.json ***!
  \**************************************/
/*! exports provided: name, tileSize, width, height, originX, originY, standardWidth, letterSpacing, data, default */
/***/ (function(module) {

eval("module.exports = {\"name\":\"small\",\"tileSize\":8,\"width\":16,\"height\":8,\"originX\":2,\"originY\":2,\"standardWidth\":3,\"letterSpacing\":1,\"data\":[2122,0,3,2,5,0,1,2,1,1,1,2,5,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,3,2,36,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,19,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,19,0,5,2,3,0,1,2,3,1,1,2,3,0,2,2,2,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,2,2,1,1,2,2,4,0,3,2,14,0,3,2,3,0,3,2,1,1,1,2,3,0,1,2,1,1,3,2,3,0,2,2,1,1,2,2,3,0,3,2,1,1,1,2,3,0,1,2,1,1,3,2,3,0,3,2,13,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,2,1,2,2,3,0,2,2,1,1,1,2,5,0,3,2,37,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,3,2,13,0,3,2,4,0,2,2,1,1,1,2,4,0,1,2,1,1,2,2,4,0,1,2,1,1,1,2,5,0,1,2,1,1,2,2,4,0,2,2,1,1,1,2,5,0,3,2,13,0,3,2,5,0,1,2,1,1,2,2,4,0,2,2,1,1,1,2,5,0,1,2,1,1,1,2,4,0,2,2,1,1,1,2,4,0,1,2,1,1,2,2,4,0,3,2,28,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,2,2,1,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,20,0,3,2,4,0,2,2,1,1,2,2,3,0,1,2,3,1,1,2,3,0,2,2,1,1,2,2,4,0,3,2,20,0,3,2,5,0,1,2,1,1,2,2,4,0,2,2,1,1,1,2,5,0,3,2,52,0,5,2,3,0,1,2,3,1,1,2,3,0,5,2,28,0,3,2,5,0,1,2,1,1,1,2,5,0,3,2,52,0,3,2,5,0,1,2,1,1,2,2,4,0,2,2,1,1,2,2,4,0,2,2,1,1,1,2,5,0,3,2,19,0,4,2,4,0,1,2,2,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,2,2,2,1,1,2,4,0,4,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,2,2,1,1,2,2,4,0,1,2,1,1,1,2,4,0,2,2,1,1,1,2,4,0,1,2,2,1,1,2,4,0,4,2,12,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,13,0,3,2,5,0,1,2,1,1,1,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,5,2,12,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,2,2,4,0,2,2,1,1,1,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,20,0,3,2,5,0,1,2,1,1,1,2,5,0,3,2,5,0,1,2,1,1,1,2,5,0,3,2,20,0,3,2,5,0,1,2,1,1,2,2,4,0,2,2,1,1,1,2,5,0,3,2,5,0,1,2,1,1,1,2,5,0,3,2,22,0,3,2,4,0,2,2,1,1,1,2,3,0,2,2,1,1,2,2,3,0,1,2,1,1,2,2,4,0,2,2,1,1,2,2,4,0,2,2,1,1,1,2,5,0,3,2,19,0,5,2,3,0,1,2,3,1,1,2,3,0,5,2,3,0,1,2,3,1,1,2,3,0,5,2,19,0,3,2,5,0,1,2,1,1,2,2,4,0,2,2,1,1,2,2,4,0,2,2,1,1,1,2,3,0,2,2,1,1,2,2,3,0,1,2,1,1,2,2,4,0,3,2,14,0,3,2,5,0,1,2,1,1,1,2,5,0,4,2,4,0,1,2,2,1,1,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,12,0,4,2,3,0,2,2,2,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,2,2,1,1,2,2,4,0,3,2,12,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,2,1,2,2,3,0,4,2,12,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,1,1,1,2,5,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,4,2,4,0,1,2,2,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,2,1,2,2,3,0,4,2,12,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,2,2,1,1,2,2,4,0,1,2,1,1,1,2,4,0,2,2,1,1,2,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,3,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,3,2,11,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,2,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,3,2,13,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,12,0,4,2,3,0,2,2,2,1,1,2,3,0,1,2,2,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,2,1,2,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,4,2,4,0,1,2,2,1,2,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,2,2,2,1,1,2,4,0,4,2,12,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,4,0,2,2,1,1,2,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,12,0,3,2,4,0,2,2,1,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,2,2,1,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,12,0,3,2,5,0,1,2,1,1,1,2,4,0,2,2,1,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,2,2,1,1,2,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,11,0,4,2,4,0,1,2,2,1,1,2,4,0,1,2,1,1,2,2,4,0,1,2,1,1,1,2,5,0,1,2,1,1,2,2,4,0,1,2,2,1,1,2,4,0,4,2,22,0,3,2,4,0,2,2,1,1,1,2,3,0,2,2,1,1,2,2,3,0,1,2,1,1,2,2,4,0,3,2,22,0,4,2,4,0,1,2,2,1,1,2,4,0,2,2,1,1,1,2,5,0,1,2,1,1,1,2,4,0,2,2,1,1,1,2,4,0,1,2,2,1,1,2,4,0,4,2,35,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,2,2,1,1,2,2,4,0,3,2,12,0,5,2,3,0,1,2,3,1,1,2,3,0,5,2,68,0,3,2,4,0,2,2,1,1,1,2,4,0,1,2,1,1,2,2,4,0,3,2,14,0,4,2,3,0,2,2,2,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,2,2,2,1,1,2,4,0,4,2,19,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,3,2,13,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,5,2,19,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,3,2,1,1,1,2,5,0,3,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,19,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,2,2,4,0,1,2,2,1,1,2,4,0,1,2,1,1,3,2,3,0,2,2,2,1,1,2,4,0,4,2,11,0,5,2,3,0,1,2,3,1,1,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,19,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,3,2,3,0,3,2,14,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,3,2,5,0,1,2,1,1,1,2,5,0,3,2,12,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,3,2,1,1,1,2,5,0,3,2,5,0,1,2,1,1,1,2,5,0,3,2,11,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,2,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,3,2,3,0,1,2,1,1,1,2,5,0,3,2,14,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,3,2,12,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,19,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,19,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,19,0,3,2,5,0,1,2,1,1,3,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,21,0,3,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,19,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,3,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,2,1,2,2,3,0,4,2,20,0,4,2,4,0,1,2,2,1,2,2,3,0,3,2,1,1,1,2,3,0,1,2,1,1,3,2,3,0,2,2,2,1,1,2,4,0,4,2,20,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,4,0,2,2,1,1,2,2,3,0,1,2,3,1,1,2,3,0,2,2,1,1,2,2,4,0,3,2,12,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,20,0,3,2,4,0,2,2,1,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,19,0,5,2,3,0,1,2,3,1,1,2,3,0,1,2,3,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,19,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,2,2,1,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,20,0,3,2,5,0,1,2,1,1,1,2,4,0,2,2,1,1,2,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,5,2,19,0,5,2,3,0,1,2,3,1,1,2,3,0,2,2,1,1,2,2,3,0,3,2,1,1,1,2,3,0,1,2,3,1,1,2,3,0,5,2,20,0,4,2,4,0,1,2,2,1,1,2,3,0,2,2,1,1,2,2,3,0,1,2,2,1,1,2,4,0,2,2,1,1,2,2,4,0,1,2,2,1,1,2,4,0,4,2,12,0,3,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,1,2,1,1,1,2,5,0,3,2,12,0,4,2,4,0,1,2,2,1,1,2,4,0,2,2,1,1,2,2,4,0,1,2,2,1,1,2,3,0,2,2,1,1,2,2,3,0,1,2,2,1,1,2,4,0,4,2,28,0,5,2,3,0,1,2,1,1,1,2,1,1,1,2,3,0,2,2,1,1,2,2,4,0,3,2,75,0]};\n\n//# sourceURL=webpack://bitmelo/./src/FontData/small.font.json?");

/***/ }),

/***/ "./src/FontData/standard.font.json":
/*!*****************************************!*\
  !*** ./src/FontData/standard.font.json ***!
  \*****************************************/
/*! exports provided: name, tileSize, width, height, originX, originY, standardWidth, letterSpacing, charData, data, default */
/***/ (function(module) {

eval("module.exports = {\"name\":\"standard\",\"tileSize\":16,\"width\":16,\"height\":16,\"originX\":2,\"originY\":4,\"standardWidth\":5,\"letterSpacing\":1,\"charData\":{\"33\":{\"name\":\"!\",\"width\":3},\"34\":{\"name\":\"double quote\",\"width\":4},\"37\":{\"name\":\"percent\",\"width\":7},\"38\":{\"name\":\"and\",\"width\":7},\"39\":{\"name\":\"single quote\",\"width\":1},\"40\":{\"name\":\"(\",\"width\":3},\"41\":{\"name\":\")\",\"width\":3},\"44\":{\"name\":\",\",\"width\":2},\"46\":{\"name\":\".\",\"width\":1},\"47\":{\"name\":\"f slash\",\"width\":7},\"49\":{\"name\":\"1\",\"width\":3},\"58\":{\"name\":\":\",\"width\":1},\"59\":{\"name\":\";\",\"width\":2},\"60\":{\"name\":\"<\",\"width\":4},\"62\":{\"name\":\">\",\"width\":4},\"64\":{\"name\":\"@\",\"width\":7},\"91\":{\"name\":\"[\",\"width\":3},\"92\":{\"name\":\"backslash\",\"width\":7},\"93\":{\"name\":\"]\",\"width\":3},\"96\":{\"name\":\"grave\",\"width\":2},\"105\":{\"name\":\"i\",\"width\":1},\"107\":{\"name\":\"k\",\"width\":4},\"108\":{\"name\":\"l\",\"width\":1},\"123\":{\"name\":\"{\",\"width\":3},\"124\":{\"name\":\"|\",\"width\":1},\"125\":{\"name\":\"}\",\"width\":3},\"161\":{\"name\":\"upside down !\",\"width\":3},\"164\":{\"name\":\"currency\",\"width\":6},\"165\":{\"name\":\"yen\",\"width\":7},\"166\":{\"name\":\"broken bar\",\"width\":1},\"167\":{\"name\":\"section\",\"width\":6},\"169\":{\"name\":\"copyright\",\"width\":7},\"170\":{\"name\":\"f ordinal\",\"width\":4},\"171\":{\"name\":\"<<\",\"width\":6},\"172\":{\"name\":\"not\",\"width\":6},\"174\":{\"name\":\"(r)\",\"width\":8},\"176\":{\"name\":\"degree\",\"width\":4},\"178\":{\"name\":\"^2\",\"width\":3},\"179\":{\"name\":\"^3\",\"width\":3},\"180\":{\"name\":\"acute\",\"width\":2},\"182\":{\"name\":\"pilcrow\",\"width\":3},\"183\":{\"name\":\"middle dot\",\"width\":1},\"185\":{\"name\":\"^1\",\"width\":4},\"186\":{\"name\":\"m ordinal\",\"width\":4},\"187\":{\"name\":\">>\",\"width\":6},\"188\":{\"name\":\"1/4\",\"width\":7},\"189\":{\"name\":\"1/2\",\"width\":7},\"190\":{\"name\":\"3/4\",\"width\":7},\"236\":{\"name\":\"i\",\"width\":3},\"237\":{\"name\":\"i\",\"width\":3},\"238\":{\"name\":\"i\",\"width\":3},\"239\":{\"name\":\"i\",\"width\":3},\"8364\":{\"name\":\"euro\",\"remap\":1,\"width\":6}},\"data\":[307,0,5,2,10,0,2,2,3,1,2,2,8,0,2,2,1,1,3,2,1,1,1,2,8,0,1,2,4,1,3,2,8,0,2,2,1,1,4,2,9,0,1,2,4,1,3,2,8,0,2,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,8058,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,12,0,2,2,1,1,2,2,11,0,1,2,3,1,1,2,11,0,1,2,3,1,1,2,11,0,1,2,3,1,1,2,11,0,1,2,3,1,1,2,11,0,5,2,219,0,6,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,6,2,107,0,5,2,10,0,2,2,1,1,1,2,1,1,2,2,9,0,1,2,5,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,9,0,1,2,5,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,5,2,140,0,3,2,11,0,3,2,1,1,2,2,10,0,1,2,4,1,2,2,9,0,3,2,1,1,1,2,1,1,1,2,10,0,2,2,1,1,1,2,1,1,1,2,9,0,2,2,3,1,2,2,9,0,1,2,1,1,1,2,1,1,2,2,10,0,1,2,1,1,1,2,1,1,3,2,9,0,2,2,4,1,1,2,10,0,2,2,1,1,3,2,11,0,3,2,107,0,3,2,2,0,3,2,8,0,1,2,1,1,4,2,1,1,2,2,7,0,2,2,1,1,2,2,1,1,1,2,1,1,1,2,8,0,2,2,1,1,2,2,1,1,2,2,8,0,3,2,1,1,3,2,8,0,2,2,1,1,2,2,1,1,2,2,8,0,1,2,1,1,1,2,1,1,2,2,1,1,2,2,7,0,2,2,1,1,4,2,1,1,1,2,8,0,3,2,2,0,3,2,120,0,8,2,7,0,2,2,4,1,1,2,1,1,1,2,7,0,1,2,1,1,4,2,1,1,2,2,7,0,1,2,1,1,3,2,1,1,1,2,1,1,1,2,7,0,1,2,1,1,2,2,2,1,3,2,7,0,2,2,2,1,2,2,1,1,1,2,9,0,2,2,1,1,2,2,1,1,1,2,10,0,2,2,2,1,2,2,11,0,4,2,217,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,111,0,3,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,1,2,1,1,1,2,13,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,123,0,3,2,13,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,1,2,1,1,1,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,189,0,6,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,2,2,2,1,2,2,10,0,2,2,2,1,2,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,6,2,108,0,3,2,13,0,1,2,1,1,1,2,11,0,3,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,3,2,1,1,3,2,11,0,1,2,1,1,1,2,13,0,3,2,139,0,3,2,13,0,1,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,236,0,7,2,9,0,1,2,5,1,1,2,9,0,7,2,185,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,221,0,3,2,13,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,120,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,2,1,2,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,122,0,5,2,11,0,1,2,3,1,1,2,11,0,2,2,1,1,2,2,12,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,12,0,2,2,1,1,1,2,12,0,1,2,2,1,1,2,12,0,2,2,1,1,1,2,13,0,3,2,124,0,7,2,9,0,1,2,5,1,1,2,9,0,2,2,1,1,4,2,10,0,2,2,1,1,2,2,12,0,2,2,1,1,2,2,9,0,5,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,123,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,5,2,1,1,1,2,10,0,1,2,3,1,2,2,9,0,5,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,126,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,9,0,5,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,121,0,6,2,10,0,1,2,4,1,2,2,9,0,5,2,1,1,1,2,9,0,5,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,1,2,1,1,4,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,7,2,122,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,124,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,9,0,5,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,7,2,122,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,123,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,5,2,1,1,1,2,9,0,2,2,4,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,138,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,157,0,3,2,13,0,1,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,175,0,3,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,10,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,138,0,7,2,9,0,1,2,5,1,1,2,9,0,7,2,9,0,1,2,5,1,1,2,9,0,7,2,169,0,3,2,13,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,10,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,127,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,13,0,1,2,1,1,2,2,12,0,1,2,2,1,2,2,9,0,5,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,124,0,7,2,8,0,2,2,5,1,1,2,7,0,2,2,1,1,6,2,7,0,1,2,1,1,1,2,2,1,1,2,1,1,2,2,7,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,7,0,1,2,1,1,1,2,3,1,1,2,1,1,1,2,7,0,2,2,1,1,4,2,1,1,1,2,8,0,2,2,4,1,2,2,9,0,6,2,120,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,12,0,3,2,123,0,6,2,10,0,1,2,4,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,6,2,123,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,3,2,9,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,1,0,3,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,122,0,6,2,10,0,1,2,4,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,6,2,122,0,7,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,4,2,10,0,1,2,4,1,1,2,10,0,1,2,1,1,4,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,7,2,121,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,4,2,10,0,1,2,4,1,1,2,10,0,1,2,1,1,4,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,7,2,122,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,3,1,1,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,122,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,121,0,7,2,9,0,1,2,5,1,1,2,9,0,3,2,1,1,3,2,11,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,11,0,3,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,7,2,121,0,7,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,3,2,1,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,121,0,3,2,1,0,3,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,2,2,1,1,2,2,9,0,1,2,1,1,1,2,1,1,2,2,10,0,1,2,2,1,2,2,11,0,1,2,1,1,1,2,1,1,2,2,10,0,1,2,1,1,2,2,1,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,3,2,1,0,3,2,121,0,7,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,125,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,2,1,1,2,2,1,1,2,9,0,7,2,121,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,2,1,2,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,3,2,1,0,3,2,122,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,122,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,4,2,10,0,1,2,4,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,6,2,123,0,6,2,9,0,2,2,2,1,1,2,1,1,1,2,9,0,1,2,1,1,1,2,2,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,122,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,6,2,122,0,6,2,10,0,1,2,4,1,2,2,9,0,5,2,1,1,1,2,10,0,4,2,1,1,1,2,9,0,2,2,3,1,2,2,9,0,1,2,1,1,4,2,10,0,1,2,1,1,5,2,9,0,2,2,4,1,1,2,10,0,6,2,123,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,11,0,3,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,7,2,122,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,123,0,3,2,12,0,2,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,121,0,7,2,9,0,1,2,2,1,1,2,2,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,121,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,123,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,12,0,2,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,121,0,7,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,5,2,9,0,2,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,2,2,9,0,5,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,7,2,121,0,4,2,12,0,1,2,2,1,1,2,12,0,1,2,1,1,2,2,12,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,2,2,12,0,1,2,2,1,1,2,12,0,4,2,130,0,3,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,10,0,2,2,1,1,2,2,10,0,2,2,1,1,2,2,10,0,2,2,1,1,2,2,10,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,125,0,4,2,12,0,1,2,2,1,1,2,12,0,2,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,12,0,2,2,1,1,1,2,12,0,1,2,2,1,1,2,12,0,4,2,188,0,3,2,1,0,3,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,12,0,3,2,107,0,7,2,9,0,1,2,5,1,1,2,9,0,7,2,314,0,3,2,12,0,2,2,1,1,1,2,12,0,1,2,1,1,2,2,12,0,1,2,1,1,1,2,13,0,3,2,110,0,6,2,9,0,2,2,2,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,154,0,6,2,10,0,1,2,4,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,1,2,1,1,4,2,10,0,1,2,1,1,1,2,13,0,3,2,126,0,6,2,9,0,2,2,4,1,1,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,1,2,13,0,1,2,1,1,5,2,9,0,2,2,4,1,1,2,10,0,6,2,154,0,6,2,9,0,2,2,4,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,4,1,1,2,10,0,4,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,122,0,5,2,10,0,2,2,3,1,1,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,154,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,3,2,11,0,1,2,3,1,1,2,11,0,1,2,1,1,5,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,91,0,5,2,11,0,1,2,3,1,2,2,10,0,4,2,1,1,1,2,9,0,2,2,4,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,154,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,1,2,1,1,4,2,10,0,1,2,1,1,1,2,13,0,3,2,125,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,94,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,3,2,1,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,121,0,6,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,1,2,1,1,1,2,1,1,2,2,10,0,1,2,2,1,2,2,11,0,1,2,1,1,1,2,1,1,2,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,1,2,1,1,4,2,10,0,1,2,1,1,1,2,13,0,3,2,125,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,125,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,154,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,155,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,122,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,4,2,10,0,1,2,4,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,6,2,126,0,4,2,12,0,1,2,2,1,1,2,9,0,4,2,1,1,2,2,8,0,2,2,4,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,154,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,2,2,12,0,1,2,2,1,4,2,9,0,1,2,1,1,1,2,3,1,1,2,9,0,7,2,153,0,6,2,10,0,1,2,4,1,2,2,9,0,5,2,1,1,1,2,9,0,2,2,3,1,2,2,9,0,1,2,1,1,5,2,9,0,2,2,4,1,1,2,10,0,6,2,155,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,11,0,3,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,3,2,1,1,3,2,11,0,1,2,1,1,1,2,13,0,3,2,124,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,155,0,3,2,12,0,2,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,154,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,153,0,3,2,1,0,3,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,3,2,1,0,3,2,122,0,5,2,11,0,1,2,3,1,2,2,10,0,4,2,1,1,1,2,9,0,2,2,4,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,153,0,7,2,9,0,1,2,5,1,1,2,9,0,2,2,1,1,4,2,10,0,2,2,1,1,2,2,10,0,4,2,1,1,2,2,9,0,1,2,5,1,1,2,9,0,7,2,139,0,3,2,12,0,2,2,1,1,1,2,12,0,1,2,1,1,2,2,12,0,1,2,1,1,1,2,12,0,2,2,1,1,1,2,12,0,1,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,91,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,93,0,3,2,13,0,1,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,2,2,12,0,2,2,1,1,1,2,12,0,1,2,1,1,2,2,12,0,1,2,1,1,1,2,12,0,2,2,1,1,1,2,12,0,1,2,1,1,2,2,12,0,3,2,157,0,6,2,10,0,1,2,1,1,1,2,2,1,2,2,9,0,2,2,2,1,1,2,1,1,1,2,10,0,6,2,8857,0,5,2,11,0,1,2,3,1,1,2,11,0,1,2,3,1,1,2,11,0,1,2,3,1,1,2,11,0,1,2,3,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,126,0,3,2,11,0,3,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,1,2,1,1,3,2,9,0,1,2,1,1,1,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,3,2,1,1,3,2,11,0,3,2,139,0,7,2,9,0,1,2,5,1,1,2,9,0,2,2,1,1,4,2,9,0,2,2,1,1,2,2,11,0,1,2,3,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,5,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,122,0,3,2,3,0,3,2,7,0,1,2,1,1,5,2,1,1,1,2,7,0,2,2,5,1,2,2,8,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,8,0,2,2,5,1,2,2,7,0,1,2,1,1,5,2,1,1,1,2,7,0,3,2,3,0,3,2,106,0,3,2,12,0,2,2,1,1,2,2,11,0,1,2,3,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,3,1,1,2,11,0,2,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,2,2,8,0,2,2,1,1,3,2,1,1,2,2,7,0,1,2,1,1,2,2,1,0,2,2,1,1,1,2,7,0,3,2,3,0,3,2,103,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,3,2,110,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,5,2,1,1,1,2,9,0,2,2,4,1,2,2,8,0,1,2,1,1,4,2,1,1,1,2,8,0,1,2,1,1,4,2,1,1,1,2,8,0,2,2,4,1,2,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,218,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,92,0,5,2,10,0,2,2,3,1,2,2,8,0,2,2,1,1,3,2,1,1,2,2,7,0,1,2,1,1,1,2,3,1,1,2,1,1,1,2,7,0,1,2,1,1,1,2,1,1,3,2,1,1,1,2,7,0,1,2,1,1,1,2,3,1,1,2,1,1,1,2,7,0,2,2,1,1,3,2,1,1,2,2,8,0,2,2,3,1,2,2,10,0,5,2,169,0,6,2,10,0,1,2,4,1,1,2,10,0,6,2,10,0,2,2,1,1,1,2,1,1,1,2,10,0,1,2,1,1,1,2,2,1,1,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,2,2,2,1,2,2,11,0,4,2,109,0,6,2,9,0,2,2,1,1,2,2,1,1,1,2,8,0,2,2,1,1,2,2,1,1,2,2,8,0,1,2,1,1,2,2,1,1,2,2,9,0,2,2,1,1,2,2,1,1,2,2,9,0,2,2,1,1,2,2,1,1,1,2,10,0,6,2,173,0,3,2,13,0,1,2,1,1,1,2,8,0,6,2,1,1,1,2,8,0,1,2,6,1,1,2,8,0,8,2,410,0,6,2,9,0,2,2,4,1,2,2,7,0,2,2,2,1,2,2,2,1,2,2,6,0,1,2,1,1,1,2,1,1,2,2,1,1,1,2,1,1,1,2,6,0,1,2,1,1,1,2,3,1,2,2,1,1,1,2,6,0,1,2,1,1,1,2,1,1,2,2,1,1,1,2,1,1,1,2,6,0,1,2,1,1,1,2,4,1,1,2,1,1,1,2,6,0,2,2,1,1,4,2,1,1,2,2,7,0,2,2,4,1,2,2,9,0,6,2,200,0,7,2,9,0,1,2,5,1,1,2,9,0,7,2,186,0,4,2,11,0,2,2,2,1,2,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,2,2,2,1,2,2,11,0,4,2,107,0,7,2,9,0,1,2,5,1,1,2,9,0,7,2,11,0,1,2,1,1,1,2,11,0,3,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,3,2,1,1,3,2,11,0,1,2,1,1,1,2,13,0,3,2,187,0,5,2,11,0,1,2,3,1,1,2,11,0,1,2,2,1,2,2,11,0,3,2,1,1,1,2,11,0,1,2,2,1,2,2,11,0,4,2,172,0,5,2,11,0,1,2,3,1,1,2,11,0,2,2,2,1,1,2,11,0,3,2,1,1,1,2,11,0,1,2,3,1,1,2,11,0,5,2,187,0,3,2,13,0,1,2,1,1,2,2,12,0,1,2,2,1,1,2,12,0,2,2,1,1,1,2,13,0,3,2,76,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,5,2,9,0,1,2,3,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,3,2,1,0,3,2,153,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,1,2,1,1,1,2,1,1,1,2,10,0,2,2,1,1,1,2,1,1,1,2,10,0,1,2,2,1,1,2,1,1,1,2,10,0,1,2,2,1,1,2,1,1,1,2,10,0,1,2,2,1,1,2,1,1,1,2,10,0,2,2,3,1,1,2,11,0,5,2,139,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,142,0,5,2,11,0,1,2,3,1,1,2,11,0,3,2,1,1,1,2,12,0,1,2,1,1,2,2,12,0,3,2,283,0,5,2,11,0,1,2,3,1,1,2,11,0,2,2,1,1,2,2,11,0,2,2,1,1,1,2,12,0,1,2,2,1,1,2,12,0,4,2,156,0,6,2,10,0,1,2,4,1,1,2,10,0,6,2,10,0,2,2,2,1,2,2,10,0,1,2,1,1,2,0,1,1,1,2,10,0,1,2,1,1,2,0,1,1,1,2,10,0,2,2,2,1,2,2,11,0,4,2,107,0,6,2,10,0,1,2,1,1,2,2,1,1,2,2,9,0,2,2,1,1,2,2,1,1,2,2,9,0,2,2,1,1,2,2,1,1,1,2,8,0,2,2,1,1,2,2,1,1,2,2,8,0,1,2,1,1,2,2,1,1,2,2,9,0,6,2,144,0,3,2,11,0,3,2,1,1,1,2,8,0,4,2,3,1,1,2,8,0,1,2,1,1,2,2,1,1,1,2,1,1,1,2,8,0,2,2,1,1,5,2,8,0,3,2,1,1,2,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,1,2,1,1,4,2,10,0,1,2,1,1,1,2,13,0,3,2,112,0,6,2,10,0,1,2,4,1,1,2,7,0,6,2,1,1,2,2,7,0,1,2,1,1,2,2,3,1,1,2,8,0,2,2,1,1,5,2,8,0,3,2,1,1,2,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,1,2,1,1,4,2,10,0,1,2,1,1,1,2,13,0,3,2,114,0,3,2,11,0,3,2,1,1,1,2,8,0,4,2,3,1,1,2,8,0,1,2,1,1,2,2,1,1,1,2,1,1,1,2,8,0,2,2,1,1,5,2,7,0,4,2,1,1,2,2,9,0,1,2,3,1,1,2,1,1,1,2,9,0,2,2,2,1,3,2,9,0,1,2,3,1,1,2,11,0,5,2,108,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,5,2,9,0,2,2,2,1,1,2,12,0,2,2,1,1,1,2,13,0,3,2,13,0,1,2,1,1,1,2,13,0,3,2,123,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,12,0,4,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,60,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,11,0,4,2,12,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,58,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,11,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,75,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,11,0,5,2,11,0,1,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,1,2,11,0,5,2,73,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,11,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,90,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,12,0,3,2,12,0,2,2,1,1,2,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,59,0,3,2,1,0,6,2,6,0,1,2,1,1,1,2,1,0,1,2,4,1,1,2,6,0,1,2,1,1,3,2,1,1,4,2,6,0,1,2,5,1,3,2,7,0,2,2,1,1,2,2,3,1,1,2,8,0,2,2,1,1,1,2,1,1,3,2,9,0,2,2,2,1,4,2,9,0,2,2,4,1,1,2,10,0,6,2,71,0,5,2,11,0,1,2,3,1,1,2,11,0,3,2,1,1,1,2,11,0,2,2,1,1,2,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,3,2,9,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,1,0,3,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,122,0,7,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,4,2,10,0,1,2,4,1,1,2,10,0,1,2,1,1,4,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,7,2,11,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,60,0,7,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,4,2,10,0,1,2,4,1,1,2,10,0,1,2,1,1,4,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,7,2,10,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,58,0,7,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,4,2,10,0,1,2,4,1,1,2,10,0,1,2,1,1,4,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,7,2,10,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,75,0,7,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,4,2,10,0,1,2,4,1,1,2,10,0,1,2,1,1,4,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,7,2,10,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,90,0,7,2,9,0,1,2,5,1,1,2,9,0,3,2,1,1,3,2,11,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,11,0,3,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,7,2,11,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,60,0,7,2,9,0,1,2,5,1,1,2,9,0,3,2,1,1,3,2,11,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,11,0,3,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,7,2,10,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,58,0,7,2,9,0,1,2,5,1,1,2,9,0,3,2,1,1,3,2,11,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,11,0,3,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,7,2,10,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,75,0,7,2,9,0,1,2,5,1,1,2,9,0,3,2,1,1,3,2,11,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,11,0,3,2,1,1,3,2,9,0,1,2,5,1,1,2,9,0,7,2,10,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,90,0,6,2,10,0,1,2,4,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,8,0,2,2,1,1,3,2,1,1,1,2,8,0,1,2,3,1,2,2,1,1,1,2,8,0,2,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,6,2,122,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,2,1,2,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,7,2,10,0,1,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,1,2,11,0,5,2,74,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,61,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,59,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,76,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,1,2,11,0,5,2,74,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,90,0,3,2,1,0,3,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,3,2,1,0,3,2,136,0,3,2,13,0,1,2,1,1,5,2,9,0,2,2,4,1,2,2,9,0,1,2,2,1,2,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,2,2,4,1,2,2,9,0,5,2,1,1,1,2,13,0,3,2,105,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,11,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,61,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,10,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,59,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,10,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,76,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,10,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,92,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,12,0,2,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,10,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,58,0,5,2,11,0,1,2,3,1,1,2,11,0,2,2,1,1,3,2,11,0,1,2,3,1,2,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,1,2,1,1,2,2,1,1,1,2,10,0,1,2,3,1,2,2,9,0,2,2,1,1,3,2,10,0,1,2,3,1,1,2,11,0,5,2,91,0,6,2,10,0,1,2,1,1,1,2,2,1,2,2,9,0,1,2,2,1,2,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,1,2,1,1,2,2,1,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,6,2,91,0,6,2,9,0,2,2,2,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,93,0,6,2,9,0,2,2,2,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,91,0,6,2,9,0,2,2,2,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,108,0,6,2,9,0,2,2,2,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,1,2,11,0,5,2,106,0,6,2,9,0,2,2,2,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,123,0,6,2,9,0,2,2,2,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,92,0,8,2,7,0,2,2,1,1,1,2,4,1,1,2,7,0,1,2,1,1,1,2,2,1,5,2,6,0,1,2,1,1,2,2,5,1,1,2,6,0,1,2,1,1,2,2,1,1,3,2,1,1,1,2,6,0,2,2,6,1,2,2,7,0,8,2,104,0,5,2,11,0,1,2,3,1,1,2,11,0,3,2,1,1,1,2,11,0,2,2,1,1,3,2,9,0,2,2,4,1,1,2,9,0,1,2,1,1,5,2,9,0,1,2,1,1,1,2,13,0,1,2,1,1,5,2,9,0,2,2,4,1,1,2,10,0,6,2,154,0,5,2,10,0,2,2,3,1,1,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,93,0,5,2,10,0,2,2,3,1,1,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,91,0,5,2,10,0,2,2,3,1,1,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,108,0,5,2,10,0,2,2,3,1,1,2,10,0,1,2,1,1,5,2,9,0,1,2,5,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,123,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,4,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,94,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,12,0,4,2,12,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,92,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,12,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,109,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,1,2,12,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,124,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,4,1,1,2,10,0,3,2,1,1,2,2,9,0,2,2,2,1,2,2,10,0,1,2,2,1,1,2,1,1,1,2,10,0,6,2,106,0,3,2,1,0,3,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,1,2,11,0,5,2,106,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,12,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,93,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,91,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,108,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,2,2,10,0,2,2,1,1,1,2,1,1,1,2,11,0,5,2,106,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,2,2,3,1,2,2,10,0,5,2,11,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,124,0,3,2,13,0,1,2,1,1,1,2,11,0,7,2,9,0,1,2,5,1,1,2,9,0,7,2,11,0,1,2,1,1,1,2,13,0,3,2,138,0,3,2,13,0,1,2,1,1,5,2,9,0,2,2,4,1,2,2,9,0,1,2,2,1,2,2,1,1,1,2,9,0,1,2,1,1,1,2,1,1,1,2,1,1,1,2,9,0,1,2,1,1,2,2,2,1,1,2,9,0,2,2,4,1,2,2,9,0,5,2,1,1,1,2,13,0,3,2,137,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,11,0,2,2,1,1,1,2,11,0,2,2,1,1,2,2,11,0,1,2,1,1,2,2,12,0,3,2,93,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,10,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,91,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,10,0,1,2,1,1,1,2,1,1,1,2,11,0,2,2,1,1,2,2,12,0,3,2,108,0,5,2,10,0,2,2,3,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,10,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,91,0,5,2,11,0,1,2,3,1,2,2,10,0,4,2,1,1,1,2,9,0,2,2,4,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,10,0,1,2,1,1,2,2,12,0,2,2,1,1,2,2,12,0,2,2,1,1,1,2,13,0,3,2,58,0,3,2,13,0,1,2,1,1,1,2,13,0,1,2,1,1,4,2,10,0,1,2,4,1,2,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,4,1,2,2,9,0,1,2,1,1,4,2,10,0,1,2,1,1,1,2,13,0,3,2,94,0,5,2,11,0,1,2,3,1,2,2,10,0,4,2,1,1,1,2,9,0,2,2,4,1,1,2,9,0,1,2,1,1,3,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,1,2,1,1,1,2,1,0,1,2,1,1,1,2,9,0,7,2,10,0,1,2,1,1,1,2,1,1,1,2,11,0,5,2,73,0]};\n\n//# sourceURL=webpack://bitmelo/./src/FontData/standard.font.json?");

/***/ }),

/***/ "./src/Input/Input.js":
/*!****************************!*\
  !*** ./src/Input/Input.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Keys */ \"./src/Input/Keys.js\");\n\n\n/**\n * Handle game input\n */\nclass Input {\n  constructor() {\n    /**\n     * Reference to the canvas used for mouse input.\n     * Automatically added by the Engine.\n     */\n    this.canvas = null;\n\n    /**\n     * The scale of the canvas, aka the pixel size.\n     * Added automatically by the Engine\n     */\n    this.canvasScale = 1;\n\n    /**\n     * The width of the game screen.\n     * Not affected by this.canvasScale.\n     * Added automatically by the Engine.\n     */\n    this.screenWidth = 1;\n\n    /**\n     * The height of the game screen.\n     * Not affected by this.canvasScale.\n     * Added automatically by the Engine.\n     */\n    this.screenHeight = 1;\n\n    /**\n     * Object containing input state of the mouse.\n     * mouse.isOffScreen,\n     * mouse.position.x,\n     * mouse.position.y,\n     * mouse.left.pressed,\n     * mouse.left.down,\n     * mouse.left.up,\n     * mouse.right.pressed,\n     * mouse.right.down,\n     * mouse.right.up\n     */\n    this.mouse = {};\n    this.mouse.isOffScreen = true;\n    this.mouse.position = {\n      x: -1,\n      y: -1,\n    };\n\n    this.mouse.left = {\n      pressed: false,\n      down: false,\n      up: false,\n    };\n\n    this.mouse.right = {\n      pressed: false,\n      down: false,\n      up: false,\n    };\n\n    /**\n     * Caches keyboard key states.\n     */\n    this._keysRaw = new Uint8ClampedArray( 256 );\n\n    /**\n     * Keyboard states for the current frame\n     */\n    this._currentKeys = new Uint8ClampedArray( 256 );\n\n    /**\n     * Keyboard states for the last frame\n     */\n    this._lastKeys = new Uint8ClampedArray( 256 );\n\n    /**\n     * Maps standard game buttons to keyboard keys.\n     */\n    this._buttonsToKeys = new Uint8ClampedArray( 32 );\n\n    // default button mappings\n    this._buttonsToKeys[Input.GAME_LEFT] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LEFT_ARROW;\n    this._buttonsToKeys[Input.GAME_RIGHT] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RIGHT_ARROW;\n    this._buttonsToKeys[Input.GAME_UP] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UP_ARROW;\n    this._buttonsToKeys[Input.GAME_DOWN] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DOWN_ARROW;\n\n    this._buttonsToKeys[Input.GAME_ACTION_ONE] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Z_KEY;\n    this._buttonsToKeys[Input.GAME_ACTION_TWO] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].X_KEY;\n    this._buttonsToKeys[Input.GAME_ACTION_THREE] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].A_KEY;\n    this._buttonsToKeys[Input.GAME_ACTION_FOUR] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].S_KEY;\n    this._buttonsToKeys[Input.GAME_LEFT_TRIGGER] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Q_KEY;\n    this._buttonsToKeys[Input.GAME_RIGHT_TRIGGER] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].W_KEY;\n\n    this._buttonsToKeys[Input.GAME_PAUSE] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].P_KEY;\n\n    this._buttonsToKeys[Input.MENU_LEFT] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LEFT_ARROW;\n    this._buttonsToKeys[Input.MENU_RIGHT] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RIGHT_ARROW;\n    this._buttonsToKeys[Input.MENU_UP] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UP_ARROW;\n    this._buttonsToKeys[Input.MENU_DOWN] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DOWN_ARROW;\n\n    this._buttonsToKeys[Input.MENU_CONFIRM] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].X_KEY;\n    this._buttonsToKeys[Input.MENU_BACK] = _Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Z_KEY;\n\n    /**\n     * Standard game button states for the current frame.\n     */\n    this._currentButtons = new Uint8ClampedArray( 32 );\n\n    /**\n     * Standard game button states for the last frame.\n     */\n    this._lastButtons = new Uint8ClampedArray( 32 );\n\n    /**\n     * Is the left mouse button down this frame?\n     */\n    this._currentMouseLeft = false;\n    /**\n     * Was the left mouse button down last frame?\n     */\n    this._lastMouseLeft = false;\n\n    /**\n     * Force the left mouse button state to be down this frame.\n     * Used for the edge case in which a mouse button is clicked up and down all in the span of one frame.\n     */\n    this._forceMouseLeftDown = false;\n\n    /**\n     * Is the right mouse button down this frame?\n     */\n    this._currentMouseRight = false;\n\n    /**\n     * Was the right mouse button down last frame?\n     */\n    this._lastMouseRight = false;\n    /**\n     * Force the right mouse button state to be down this frame.\n     * Used for the edge case in which a mouse button is clicked up and down all in the span of one frame.\n     */\n    this._forceMouseRightDown = false;\n  }\n\n  /**\n   * Do initial setup. Add event listeners.\n   */\n  init() {\n    window.addEventListener( 'keydown', this._keyDown.bind( this ), false );\n    window.addEventListener( 'keyup', this._keyUp.bind( this ), false );\n\n    window.onfocus = () => {\n      this.clearInput();\n    };\n\n    window.onblur = () => {\n      this.clearInput();\n    };\n\n    if ( this.canvas ) {\n      this.canvas.oncontextmenu = ( e ) => {\n        e.preventDefault();\n      };\n\n      this.canvas.addEventListener( 'pointerenter', this._pointerEnter.bind( this ), false );\n      this.canvas.addEventListener( 'pointermove', this._pointerMove.bind( this ), false );\n      this.canvas.addEventListener( 'pointerdown', this._pointerDown.bind( this ), false );\n      this.canvas.addEventListener( 'pointerup', this._pointerUp.bind( this ), false );\n      this.canvas.addEventListener( 'pointerleave', this._pointerLeave.bind( this ), false );\n    }\n  }\n\n  /**\n   * handle window keydown events\n   * @param {*} e\n   */\n  _keyDown( e ) {\n    // stop losing focus with certain keys\n    if (\n      e.which === 9 // tab\n      || e.which === 18 // alt\n    ) {\n      e.preventDefault();\n    }\n\n    if ( e.code ) {\n      this._keysRaw[_Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].codesToKeyCodes[e.code]] = 1;\n    }\n    else {\n      this._keysRaw[e.keyCode] = 1;\n    }\n  }\n\n  /**\n   * handle window keyup events\n   * @param {*} e\n   */\n  _keyUp( e ) {\n    if ( e.code ) {\n      this._keysRaw[_Keys__WEBPACK_IMPORTED_MODULE_0__[\"default\"].codesToKeyCodes[e.code]] = 0;\n    }\n    else {\n      this._keysRaw[e.keyCode] = 0;\n    }\n  }\n\n  /**\n   * Handle pointerenter event\n   */\n  _pointerEnter() {\n    this.mouse.isOffScreen = false;\n    this._currentMouseLeft = false;\n    this._currentMouseRight = false;\n  }\n\n  /**\n   * Handle pointermove event\n   * @param {*} e\n   */\n  _pointerMove( e ) {\n    const canvasRect = this.canvas.getBoundingClientRect();\n    this.mouse.position = {\n      x: Math.floor( ( e.clientX - canvasRect.left ) / this.canvasScale ),\n      y: this.screenHeight - Math.floor( ( e.clientY - canvasRect.top ) / this.canvasScale ) - 1,\n    };\n  }\n\n  /**\n   * Handle pointerdown event\n   * @param {*} e\n   */\n  _pointerDown( e ) {\n    if ( e.button === 0 ) {\n      // left button\n      this._currentMouseLeft = true;\n      this._forceMouseLeftDown = true;\n    }\n    else if ( e.button === 2 ) {\n      // right button\n      this._currentMouseRight = true;\n      this._forceMouseRightDown = true;\n    }\n  }\n\n  /**\n   * handle pointerup event\n   * @param {*} e\n   */\n  _pointerUp( e ) {\n    if ( e.button === 0 ) {\n      // left button\n      this._currentMouseLeft = false;\n    }\n    else if ( e.button === 2 ) {\n      // right button\n      this._currentMouseRight = false;\n    }\n  }\n\n  /**\n   * handle pointerleave event\n   */\n  _pointerLeave() {\n    this.mouse.isOffScreen = true;\n  }\n\n  /**\n   * clear out all of the input\n   */\n  clearInput() {\n    for ( let i = 0; i < 256; i += 1 ) {\n      this._keysRaw[i] = 0;\n      this._lastKeys[i] = 0;\n      this._currentKeys[i] = 0;\n    }\n  }\n\n  /**\n   * Update the input, should be done first thing in the game loop.\n   * Called automatically by the Engine.\n   */\n  pollInput() {\n    for ( let i = 0; i < 256; i += 1 ) {\n      this._lastKeys[i] = this._currentKeys[i];\n      this._currentKeys[i] = this._keysRaw[i];\n    }\n\n    this._updateButtons();\n\n    this.mouse.left.pressed = this._forceMouseLeftDown ? true : this._currentMouseLeft;\n    this.mouse.left.down = this._forceMouseLeftDown ? true : this._currentMouseLeft && !this._lastMouseLeft;\n    this.mouse.left.up = !this._currentMouseLeft && this._lastMouseLeft;\n\n    this.mouse.right.pressed = this._forceMouseRightDown ? true : this._currentMouseRight;\n    this.mouse.right.down = this._forceMouseRightDown ? true : this._currentMouseRight && !this._lastMouseRight;\n    this.mouse.right.up = !this._currentMouseRight && this._lastMouseRight;\n\n    this._forceMouseLeftDown = false;\n    this._forceMouseRightDown = false;\n\n    this._lastMouseLeft = this._currentMouseLeft;\n    this._lastMouseRight = this._currentMouseRight;\n  }\n\n  /**\n   * return true if the key is currently held down\n   * @param {number} keyCode\n   */\n  getKeyPressed( keyCode ) {\n    if ( keyCode < 0 || keyCode >= 256 ) {\n      return false;\n    }\n\n    return this._currentKeys[keyCode] > 0;\n  }\n\n  /**\n   * return true if the key was pressed down this frame\n   * @param {number} keyCode\n   */\n  getKeyDown( keyCode ) {\n    if ( keyCode < 0 || keyCode >= 256 ) {\n      return false;\n    }\n\n    const current = this._currentKeys[keyCode] > 0;\n    const last = this._lastKeys[keyCode] > 0;\n    return current && !last;\n  }\n\n  /**\n   * return true if the key was released this frame\n   * @param {number} keyCode\n   */\n  getKeyUp( keyCode ) {\n    if ( keyCode < 0 || keyCode >= 256 ) {\n      return false;\n    }\n\n    const current = this._currentKeys[keyCode] > 0;\n    const last = this._lastKeys[keyCode] > 0;\n    return !current && last;\n  }\n\n  /**\n   * return true if the standard game button is currently held down\n   * @param {number} buttonCode\n   */\n  getButtonPressed( buttonCode ) {\n    return this.getKeyPressed( this._buttonsToKeys[buttonCode] );\n  }\n\n  /**\n   * return true if the standard game button was pressed down this frame\n   * @param {number} buttonCode\n   */\n  getButtonDown( buttonCode ) {\n    return this.getKeyDown( this._buttonsToKeys[buttonCode] );\n  }\n\n  /**\n   * return true if the standard game button was released this frame\n   * @param {number} buttonCode\n   */\n  getButtonUp( buttonCode ) {\n    return this.getKeyUp( this._buttonsToKeys[buttonCode] );\n  }\n\n  /**\n   * update standard game button states.\n   */\n  _updateButtons() {\n    this._updateButton( 'left', Input.GAME_LEFT );\n    this._updateButton( 'right', Input.GAME_RIGHT );\n    this._updateButton( 'up', Input.GAME_UP );\n    this._updateButton( 'down', Input.GAME_DOWN );\n\n    this._updateButton( 'action1', Input.GAME_ACTION_ONE );\n    this._updateButton( 'action2', Input.GAME_ACTION_TWO );\n    this._updateButton( 'action3', Input.GAME_ACTION_THREE );\n    this._updateButton( 'action4', Input.GAME_ACTION_FOUR );\n    this._updateButton( 'leftTrigger', Input.GAME_LEFT_TRIGGER );\n    this._updateButton( 'rightTrigger', Input.GAME_RIGHT_TRIGGER );\n\n    this._updateButton( 'pause', Input.GAME_PAUSE );\n\n    this._updateButton( 'menuLeft', Input.MENU_LEFT );\n    this._updateButton( 'menuRight', Input.MENU_RIGHT );\n    this._updateButton( 'menuUp', Input.MENU_UP );\n    this._updateButton( 'menuDown', Input.MENU_DOWN );\n\n    this._updateButton( 'menuConfirm', Input.MENU_CONFIRM );\n    this._updateButton( 'menuBack', Input.MENU_BACK );\n  }\n\n  /**\n   * Update the state for a standard game button.\n   * @param {*} name\n   * @param {*} index\n   */\n  _updateButton( name, index ) {\n    const key = this._buttonsToKeys[index];\n    const pressed = this.getKeyPressed( key );\n    const down = this.getKeyDown( key );\n    const up = this.getKeyUp( key );\n\n    this[name] = { pressed, down, up };\n  }\n}\n\nInput.GAME_LEFT = 0;\nInput.GAME_RIGHT = 1;\nInput.GAME_UP = 2;\nInput.GAME_DOWN = 3;\nInput.GAME_ACTION_ONE = 4;\nInput.GAME_ACTION_TWO = 5;\nInput.GAME_ACTION_THREE = 6;\nInput.GAME_ACTION_FOUR = 7;\nInput.GAME_PAUSE = 8;\nInput.GAME_LEFT_TRIGGER = 9;\nInput.GAME_RIGHT_TRIGGER = 10;\n\nInput.MENU_LEFT = 11;\nInput.MENU_RIGHT = 12;\nInput.MENU_UP = 13;\nInput.MENU_DOWN = 14;\nInput.MENU_CONFIRM = 15;\nInput.MENU_BACK = 16;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Input);\n\n\n//# sourceURL=webpack://bitmelo/./src/Input/Input.js?");

/***/ }),

/***/ "./src/Input/Keys.js":
/*!***************************!*\
  !*** ./src/Input/Keys.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object mapping KeyCodes to key numbers.\n * Keys.codesToKeyCodes maps key numbers to KeyCodes.\n */\nconst Keys = {};\n\nKeys.BACKSPACE = 8;\nKeys.TAB = 9;\nKeys.ENTER = 13;\nKeys.SHIFT = 16;\nKeys.CTRL = 17;\nKeys.ALT = 18;\nKeys.PAUSE_BREAK = 19;\nKeys.CAPSLOCK = 20;\nKeys.ESCAPE = 27;\nKeys.SPACE = 32;\nKeys.PAGE_UP = 33;\nKeys.PAGE_DOWN = 34;\nKeys.END = 35;\nKeys.HOME = 36;\nKeys.LEFT_ARROW = 37;\nKeys.UP_ARROW = 38;\nKeys.RIGHT_ARROW = 39;\nKeys.DOWN_ARROW = 40;\nKeys.INSERT = 45;\nKeys.DELETE = 46;\nKeys.ZERO = 48;\nKeys.ONE = 49;\nKeys.TWO = 50;\nKeys.THREE = 51;\nKeys.FOUR = 52;\nKeys.FIVE = 53;\nKeys.SIX = 54;\nKeys.SEVEN = 55;\nKeys.EIGHT = 56;\nKeys.NINE = 57;\nKeys.A_KEY = 65;\nKeys.B_KEY = 66;\nKeys.C_KEY = 67;\nKeys.D_KEY = 68;\nKeys.E_KEY = 69;\nKeys.F_KEY = 70;\nKeys.G_KEY = 71;\nKeys.H_KEY = 72;\nKeys.I_KEY = 73;\nKeys.J_KEY = 74;\nKeys.K_KEY = 75;\nKeys.L_KEY = 76;\nKeys.M_KEY = 77;\nKeys.N_KEY = 78;\nKeys.O_KEY = 79;\nKeys.P_KEY = 80;\nKeys.Q_KEY = 81;\nKeys.R_KEY = 82;\nKeys.S_KEY = 83;\nKeys.T_KEY = 84;\nKeys.U_KEY = 85;\nKeys.V_KEY = 86;\nKeys.W_KEY = 87;\nKeys.X_KEY = 88;\nKeys.Y_KEY = 89;\nKeys.Z_KEY = 90;\nKeys.LEFT_WINDOW = 91;\nKeys.RIGHT_WINDOW = 92;\nKeys.SELECT = 93;\nKeys.NUM_ZERO = 96;\nKeys.NUM_ONE = 97;\nKeys.NUM_TWO = 98;\nKeys.NUM_THREE = 99;\nKeys.NUM_FOUR = 100;\nKeys.NUM_FIVE = 101;\nKeys.NUM_SIX = 102;\nKeys.NUM_SEVEN = 103;\nKeys.NUM_EIGHT = 104;\nKeys.NUM_NINE = 105;\nKeys.MULTIPLY = 106;\nKeys.ADD = 107;\nKeys.SUBTRACT = 109;\nKeys.DECIMAL_POINT = 110;\nKeys.DIVIDE = 111;\nKeys.F1 = 112;\nKeys.F2 = 113;\nKeys.F3 = 114;\nKeys.F4 = 115;\nKeys.F5 = 116;\nKeys.F6 = 117;\nKeys.F7 = 118;\nKeys.F8 = 119;\nKeys.F9 = 120;\nKeys.F10 = 121;\nKeys.F11 = 122;\nKeys.F12 = 123;\nKeys.NUM_LOCK = 144;\nKeys.SCROLL_LOCK = 145;\nKeys.SEMI_COLON = 186;\nKeys.EQUAL_SIGN = 187;\nKeys.COMMA = 188;\nKeys.DASH = 189;\nKeys.PERIOD = 190;\nKeys.FORWARD_SLASH = 191;\nKeys.GRAVE_ACCENT = 192;\nKeys.OPEN_BRACKET = 219;\nKeys.BACK_SLASH = 220;\nKeys.CLOSE_BRACKET = 221;\nKeys.SINGLE_QUOTE = 222;\n\nKeys.codesToKeyCodes = {\n  Backspace: Keys.BACKSPACE,\n  Tab: Keys.TAB,\n  Enter: Keys.ENTER,\n  ShiftLeft: Keys.SHIFT,\n  ShiftRight: Keys.SHIFT,\n  ControlLeft: Keys.CTRL,\n  ControlRight: Keys.CTRL,\n  AltLeft: Keys.ALT,\n  AltRight: Keys.ALT,\n  CapsLock: Keys.CAPSLOCK,\n  Escape: Keys.ESCAPE,\n  Space: Keys.SPACE,\n  PageUp: Keys.PAGE_UP,\n  PageDown: Keys.PAGE_DOWN,\n  End: Keys.END,\n  Home: Keys.HOME,\n  ArrowLeft: Keys.LEFT_ARROW,\n  ArrowUp: Keys.UP_ARROW,\n  ArrowRight: Keys.RIGHT_ARROW,\n  ArrowDown: Keys.DOWN_ARROW,\n  Insert: Keys.INSERT,\n  Delete: Keys.DELETE,\n  Digit0: Keys.ZERO,\n  Digit1: Keys.ONE,\n  Digit2: Keys.TWO,\n  Digit3: Keys.THREE,\n  Digit4: Keys.FOUR,\n  Digit5: Keys.FIVE,\n  Digit6: Keys.SIX,\n  Digit7: Keys.SEVEN,\n  Digit8: Keys.EIGHT,\n  Digit9: Keys.NINE,\n  KeyA: Keys.A_KEY,\n  KeyB: Keys.B_KEY,\n  KeyC: Keys.C_KEY,\n  KeyD: Keys.D_KEY,\n  KeyE: Keys.E_KEY,\n  KeyF: Keys.F_KEY,\n  KeyG: Keys.G_KEY,\n  KeyH: Keys.H_KEY,\n  KeyI: Keys.I_KEY,\n  KeyJ: Keys.J_KEY,\n  KeyK: Keys.K_KEY,\n  KeyL: Keys.L_KEY,\n  KeyM: Keys.M_KEY,\n  KeyN: Keys.N_KEY,\n  KeyO: Keys.O_KEY,\n  KeyP: Keys.P_KEY,\n  KeyQ: Keys.Q_KEY,\n  KeyR: Keys.R_KEY,\n  KeyS: Keys.S_KEY,\n  KeyT: Keys.T_KEY,\n  KeyU: Keys.U_KEY,\n  KeyV: Keys.V_KEY,\n  KeyW: Keys.W_KEY,\n  KeyX: Keys.X_KEY,\n  KeyY: Keys.Y_KEY,\n  KeyZ: Keys.Z_KEY,\n  Select: Keys.SELECT,\n  Numpad0: Keys.NUM_ZERO,\n  Numpad1: Keys.NUM_ONE,\n  Numpad2: Keys.NUM_TWO,\n  Numpad3: Keys.NUM_THREE,\n  Numpad4: Keys.NUM_FOUR,\n  Numpad5: Keys.NUM_FIVE,\n  Numpad6: Keys.NUM_SIX,\n  Numpad7: Keys.NUM_SEVEN,\n  Numpad8: Keys.NUM_EIGHT,\n  Numpad9: Keys.NUM_NINE,\n  NumpadMultiply: Keys.MULTIPLY,\n  NumpadAdd: Keys.ADD,\n  NumpadSubtract: Keys.SUBTRACT,\n  NumpadDecimal: Keys.DECIMAL_POINT,\n  NumpadDivide: Keys.DIVIDE,\n  F1: Keys.F1,\n  F2: Keys.F2,\n  F3: Keys.F3,\n  F4: Keys.F4,\n  F5: Keys.F5,\n  F6: Keys.F6,\n  F7: Keys.F7,\n  F8: Keys.F8,\n  F9: Keys.F9,\n  F10: Keys.F10,\n  F11: Keys.F11,\n  F12: Keys.F12,\n  NumLock: Keys.NUM_LOCK,\n  ScrollLock: Keys.SCROLL_LOCK,\n  Semicolon: Keys.SEMI_COLON,\n  Equal: Keys.EQUAL_SIGN,\n  NumpadEqual: Keys.EQUAL_SIGN,\n  Comma: Keys.COMMA,\n  NumpadComma: Keys.COMMA,\n  Period: Keys.PERIOD,\n  Slash: Keys.FORWARD_SLASH,\n  Backquote: Keys.GRAVE_ACCENT,\n  BracketLeft: Keys.OPEN_BRACKET,\n  Backslash: Keys.BACK_SLASH,\n  BracketRight: Keys.CLOSE_BRACKET,\n  Quote: Keys.SINGLE_QUOTE,\n  Minus: Keys.DASH,\n  NumpadEnter: Keys.ENTER,\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Keys);\n\n\n//# sourceURL=webpack://bitmelo/./src/Input/Keys.js?");

/***/ }),

/***/ "./src/MapData/MapData.js":
/*!********************************!*\
  !*** ./src/MapData/MapData.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _TileMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TileMap */ \"./src/MapData/TileMap.js\");\n\n\n/**\n * Holds all of the Tile Map data.\n */\nclass MapData {\n  constructor() {\n    /**\n     * Array of TileMap objects\n     */\n    this.tileMaps = [];\n  }\n\n  /**\n   * Add a tilemap from a data object\n   * @param {Object} tileMap - The tile map data\n   */\n  addTileMap( tileMap ) {\n    this.tileMaps.push( new _TileMap__WEBPACK_IMPORTED_MODULE_0__[\"default\"]( tileMap ) );\n    return this.tileMaps.length - 1;\n  }\n\n  /**\n   * Get the tile GID at a given position\n   * @param {number} x - The x position\n   * @param {number} y - The y position\n   * @param {number} tileMap - The index of the tile map you are checking\n   * @param {number} layer - The index of the layer on the tile map you are checking\n   */\n  getTile( x, y, tileMap = 0, layer = 0 ) {\n    return this.tileMaps[tileMap].getTile( x, y, layer );\n  }\n\n  /**\n   * Set the tile GID at a given position\n   * @param {*} gid - The gid\n   * @param {*} x - The x position\n   * @param {*} y - The y position\n   * @param {*} tileMap - The index of the tile map you are setting\n   * @param {*} layer - The index of the layer on the tile map you are setting\n   */\n  setTile( gid, x, y, tileMap = 0, layer = 0 ) {\n    this.tileMaps[tileMap].setTile( gid, x, y, layer );\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MapData);\n\n\n//# sourceURL=webpack://bitmelo/./src/MapData/MapData.js?");

/***/ }),

/***/ "./src/MapData/TileMap.js":
/*!********************************!*\
  !*** ./src/MapData/TileMap.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Represents a Tile Map.\n */\nclass TileMap {\n  constructor( data ) {\n    /**\n     * The name of the Tile Map\n     */\n    this.name = '';\n    /**\n     * The number of columns in the Tile Map\n     */\n    this.width = 0;\n    /**\n     * The number of rows in the Tile Map\n     */\n    this.height = 0;\n\n    /**\n     * Array of layer data\n     */\n    this.layers = [];\n\n    if ( data ) {\n      this.name = data.name;\n      this.width = data.width;\n      this.height = data.height;\n\n      if ( data.layers ) {\n        for ( let i = 0; i < data.layers.length; i += 1 ) {\n          this.layers.push( this._getTypedArrayFromDataLayer( data.layers[i] ) );\n        }\n      }\n    }\n  }\n\n  /**\n   * Convert an array of numbers into a Uint16Array\n   * @param {number[]} dataLayer\n   */\n  _getTypedArrayFromDataLayer( dataLayer ) {\n    const result = new Uint16Array( this.width * this.height );\n    for ( let i = 0; i < dataLayer.length; i += 1 ) {\n      result[i] = dataLayer[i];\n    }\n    return result;\n  }\n\n  /**\n   * Get the tile GID at a given position\n   * @param {number} x - The x position\n   * @param {number} y - The y position\n   * @param {number} layer - The index of the layer on the tile map you are checking\n   */\n  getTile( x, y, layer = 0 ) {\n    const currentLayer = this.layers[layer];\n    const index = y * this.width + x;\n    return currentLayer[index];\n  }\n\n  /**\n   * Set the tile GID at a given position\n   * @param {*} gid - The gid\n   * @param {*} x - The x position\n   * @param {*} y - The y position\n   * @param {*} layer - The index of the layer on the tile map you are setting\n   */\n  setTile( gid, x, y, layer = 0 ) {\n    const currentLayer = this.layers[layer];\n    const index = y * this.width + x;\n    currentLayer[index] = gid;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (TileMap);\n\n\n//# sourceURL=webpack://bitmelo/./src/MapData/TileMap.js?");

/***/ }),

/***/ "./src/Screen/Screen.js":
/*!******************************!*\
  !*** ./src/Screen/Screen.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _standardPalette__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./standardPalette */ \"./src/Screen/standardPalette.js\");\n\n\n\n/**\n * Represents a game screen for low resolution games.\n * Has simple drawing functions using an indexed palette of a maximum of 256 colors\n * The origin (0, 0) position of the screen is on the bottom left\n */\nclass Screen {\n  constructor() {\n    /**\n     * The id of the container div to make the Screen a child of\n     */\n    this.conainerId = 'bitmelo-container';\n    /**\n     * The dom object the Screen will be a child of.\n     */\n    this.container = null;\n    /**\n     * How many pixels wide is the screen?\n     */\n    this.width = 320;\n    /**\n     * How many pixels tall is the screen?\n     */\n    this.height = 180;\n    /**\n     * The scale of the pixels in the screen.\n     */\n    this.scale = 3;\n    /**\n     * Maximum scale of the screen.\n     */\n    this.maxScale = -1;\n    /**\n     * Minimum scale of the screen.\n     */\n    this.minScale = 1;\n    /**\n     * The scale mode of the screen.\n     * Screen.SCALE_CONSTANT: 1,\n     * Screen.SCALE_FIT_WINDOW: 2\n     */\n    this.scaleMode = Screen.SCALE_CONSTANT;\n\n    /**\n     * How many horizontal pixels to ignore when using a dynamic scale.\n     */\n    this.horizontalScaleCushion = 0;\n\n    /**\n     * How many vertical pixels to ignore when using a dynamic scale.\n     */\n    this.verticalScaleCushion = 0;\n\n    /**\n     * When using dynamic scaling, should we rescale when the window is resized?\n     */\n    this.rescaleOnWindowResize = true;\n\n    /**\n     * Should the cursor be hidden when placed over the screen?\n     */\n    this.hideCursor = false;\n\n    /**\n     * Reference to an instance of TileData used by the screen.\n     */\n    this.tileData = null;\n\n    /**\n     * Reference to an instance of MapData used by the screen.\n     */\n    this.mapData = null;\n\n    /**\n     * Reference to an instance of FontData used by the screen.\n     */\n    this.fontData = null;\n\n    /**\n     * Callback that is called whenever the scale is changed.\n     * Used by the Engine to change values in the Input class.\n     */\n    this.onScaleChange = null;\n\n    /**\n     * The DOM canvas used by this screen.\n     */\n    this.canvas = null;\n\n    /**\n     * The canvas context used by this screen.\n     */\n    this._context = null;\n\n    /**\n     * The image data of the context.\n     */\n    this._imageData = null;\n\n    /**\n     * The pixel data drawn to using Screen methods such as setPixel or drawLine\n     */\n    this._screenData = null;\n\n    /**\n     * The palette data given by the user\n     */\n    this._palette = null;\n\n    /**\n     * Typed Array of paletted data generated from _palette and used by the Screen.\n     */\n    this._generatedPalette = null;\n\n    /**\n     * Does this computer use little endian formatting?\n     */\n    this._isLittleEndian = true;\n  }\n\n  /**\n   * Do initial setup such as creating the canvas and building the palette\n   */\n  init() {\n    this.container = document.getElementById( this.conainerId );\n\n    this.canvas = document.createElement( 'canvas' );\n    this.canvas.setAttribute( 'id', 'game-device' );\n    this.canvas.setAttribute( 'width', this.width );\n    this.canvas.setAttribute( 'height', this.height );\n\n    this._setScale();\n\n    if ( this.rescaleOnWindowResize && this.scaleMode !== Screen.SCALE_CONSTANT ) {\n      window.onresize = () => {\n        this._setScale();\n        this._setCanvasStyle();\n      };\n    }\n\n    this._setCanvasStyle();\n\n    this.container.appendChild( this.canvas );\n\n    this._context = this.canvas.getContext( '2d', { alpha: false } );\n    this._context.imageSmoothingEnabled = false;\n    this._screenData = new Uint8ClampedArray( this.width * this.height );\n    this._imageData = this._context.getImageData( 0, 0, this.width, this.height );\n\n    // check if we are little endian\n    const buffer = new ArrayBuffer( 4 );\n    const test8 = new Uint8ClampedArray( buffer );\n    const test32 = new Uint32Array( buffer );\n    test32[0] = 0x0a0b0c0d;\n\n    if ( test8[0] === 0x0a\n      && test8[1] === 0x0b\n      && test8[2] === 0x0c\n      && test8[3] === 0x0d\n    ) {\n      this._isLittleEndian = false;\n    }\n\n    if ( !this._palette ) {\n      this._palette = _standardPalette__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }\n\n    this._buildPalette();\n  }\n\n  /**\n   * Sets the scale of the Screen.\n   */\n  _setScale() {\n    if ( this.scaleMode === Screen.SCALE_FIT_WINDOW ) {\n      const maxWidth = window.innerWidth - this.horizontalScaleCushion;\n      const maxHeight = window.innerHeight - this.verticalScaleCushion;\n\n      const maxHorizScale = Math.floor( maxWidth / this.width );\n      const maxVerticalScale = Math.floor( maxHeight / this.height );\n\n      this.scale = maxHorizScale < maxVerticalScale ? maxHorizScale : maxVerticalScale;\n      if ( this.scale < this.minScale ) {\n        this.scale = this.minScale;\n      }\n      if ( this.maxScale > 0 && this.scale > this.maxScale ) {\n        this.scale = this.maxScale;\n      }\n    }\n\n    if ( this.onScaleChange ) {\n      this.onScaleChange( this.scale );\n    }\n  }\n\n  /**\n   * Sets css styling on the container dom object.\n   */\n  _setCanvasStyle() {\n    let containerStyle = '';\n    containerStyle += `width: ${ this.width * this.scale }px;`;\n    containerStyle += `height: ${ this.height * this.scale }px;`;\n\n    this.container.setAttribute( 'style', containerStyle );\n\n    let canvasStyle = '';\n    canvasStyle += 'transform-origin: 50% 0%;';\n    canvasStyle += `transform: scale(${ this.scale });`;\n    canvasStyle += 'image-rendering: -webkit-optimize-contrast;';\n    canvasStyle += 'image-rendering: -moz-crisp-edges;';\n    canvasStyle += 'image-rendering: crisp-edges;';\n    canvasStyle += 'image-rendering: pixelated;';\n\n\n    if ( this.hideCursor ) {\n      canvasStyle += 'cursor: none';\n    }\n\n    this.canvas.setAttribute( 'style', canvasStyle );\n  }\n\n  /**\n   * Set the palette that will used by the Screen.\n   * All colors are drawn fully opaque exept for the palette index at 0 which is transparent\n   *\n   * @example\n   * const palette = [\n   *  '000000', // black, the 0 index is transparent\n   *  '000000', // black\n   *  'ffffff', // white\n   *  'ff0000', // red\n   *  '00ff00', // green\n   *  '0000ff' // blue\n   * ];\n   *\n   * screen.setPalette( palette );\n   *\n   * @param {Array.<Array.<number>} palette - The array of colors to be used by the screen.\n   * Each index should be a color described by an array of 3 integers in rgb order.\n   * Each integer has a min value of 0 and a max value of 255.\n   */\n  setPalette( palette ) {\n    this._palette = palette;\n    this._buildPalette();\n  }\n\n  /**\n   * Change a single palette color\n   *\n   * @param {number[]} color - The color we want to add\n   * @param {number} index - this palette index we want to set\n   */\n  setPaletteColorAtIndex( color, index ) {\n    this._palette[index] = color;\n    this._buildPalette();\n  }\n\n  /**\n   * Build the palette by converting _palette to the _generatedPalette we will be using internally\n   */\n  _buildPalette() {\n    this._generatedPalette = new Uint32Array( this._palette.length );\n    let currentColor = null;\n    if ( this._isLittleEndian ) {\n      for ( let i = 0; i < this._palette.length; i += 1 ) {\n        currentColor = this._palette[i];\n        let r = 0;\n        let g = 0;\n        let b = 0;\n        if ( typeof currentColor === 'string' ) {\n          r = Number.parseInt( currentColor.slice( 0, 2 ), 16 );\n          g = Number.parseInt( currentColor.slice( 2, 4 ), 16 );\n          b = Number.parseInt( currentColor.slice( 4, 6 ), 16 );\n        }\n        else {\n          r = currentColor[0];\n          g = currentColor[1];\n          b = currentColor[2];\n        }\n        this._generatedPalette[i] = (\n          ( 255 << 24 ) // a\n          | ( b << 16 ) // b\n          | ( g << 8 ) // g\n          | r // r\n        );\n      }\n    }\n    else {\n      for ( let i = 0; i < this._palette.length; i += 1 ) {\n        currentColor = this._palette[i];\n        let r = 0;\n        let g = 0;\n        let b = 0;\n        if ( typeof currentColor === 'string' ) {\n          r = Number.parseInt( currentColor.slice( 0, 2 ), 16 );\n          g = Number.parseInt( currentColor.slice( 2, 4 ), 16 );\n          b = Number.parseInt( currentColor.slice( 4, 6 ), 16 );\n        }\n        else {\n          r = currentColor[0];\n          g = currentColor[1];\n          b = currentColor[2];\n        }\n        this._generatedPalette[i] = (\n          ( r << 24 ) // r\n          | ( g << 16 ) // g\n          | ( b << 8 ) // b\n          | 255 // a\n        );\n      }\n    }\n  }\n\n  /**\n   * Set a pixel on the screen.\n   * The origin (0, 0) of the screen is on the bottom left\n   * @param {number} x - x position\n   * @param {number} y - y position\n   * @param {number} paletteId - palette color index\n   */\n  setPixel( x, y, paletteId ) {\n    if ( !paletteId ) {\n      return;\n    }\n    if ( x < 0 || x >= this.width || y < 0 || y >= this.height ) {\n      return;\n    }\n    this._screenData[y * this.width + x] = paletteId;\n  }\n\n  /**\n   * Set a pixel on the screen, without doing any bounds checking\n   * @param {number} x - x position\n   * @param {number} y - y position\n   * @param {number} paletteId - palette color index\n   */\n  setPixelUnsafe( x, y, paletteId ) {\n    if ( !paletteId ) {\n      return;\n    }\n    this._screenData[y * this.width + x] = paletteId;\n  }\n\n  /**\n   * Get the pallete index at a given position on the screen\n   * @param {*} x - x position\n   * @param {*} y - y position\n   */\n  getPixel( x, y ) {\n    return this._screenData[y * this.width + x];\n  }\n\n  /**\n   * Fill the screen with the given palette index\n   * @param {*} paletteId - the palette index / defaults to 0 if unspecified\n   */\n  clear( paletteId ) {\n    if ( paletteId ) {\n      this._screenData.fill( paletteId );\n    }\n    else {\n      this._screenData.fill( 0 );\n    }\n  }\n\n  /**\n   * Draw a line between 2 positions\n   * @param {*} x1 - first x position\n   * @param {*} y1 - first y position\n   * @param {*} x2 - second x position\n   * @param {*} y2 - second y position\n   * @param {*} paletteId - palette index to be drawn\n   */\n  drawLine( x1, y1, x2, y2, paletteId ) {\n    if ( x1 === x2 && y1 === y2 ) {\n      // same coordinate, draw a pixel\n      this.setPixel( x1, x2, paletteId );\n      return;\n    }\n\n    if ( x1 === x2 ) {\n      // vertical line\n      if ( x1 < 0 || x1 >= this.width ) {\n        return;\n      }\n\n      let firstY = y1 < y2 ? y1 : y2;\n      let secondY = y1 < y2 ? y2 : y1;\n      if ( secondY < 0 ) {\n        return;\n      }\n      if ( firstY >= this.height ) {\n        return;\n      }\n\n      if ( firstY < 0 ) {\n        firstY = 0;\n      }\n      if ( secondY >= this.height ) {\n        secondY = this.height - 1;\n      }\n      for ( let currentY = firstY; currentY <= secondY; currentY += 1 ) {\n        this.setPixelUnsafe( x1, currentY, paletteId );\n      }\n\n      return;\n    }\n\n    if ( y1 === y2 ) {\n      // horizontal line\n      if ( y1 < 0 || y1 >= this.height ) {\n        return;\n      }\n\n      let firstX = x1 < x2 ? x1 : x2;\n      let secondX = x1 < x2 ? x2 : x1;\n      if ( secondX < 0 ) {\n        return;\n      }\n      if ( firstX >= this.width ) {\n        return;\n      }\n\n      if ( firstX < 0 ) {\n        firstX = 0;\n      }\n      if ( secondX >= this.width ) {\n        secondX = this.width - 1;\n      }\n      for ( let currentX = firstX; currentX <= secondX; currentX += 1 ) {\n        this.setPixelUnsafe( currentX, y1, paletteId );\n      }\n\n      return;\n    }\n\n    if ( Math.abs( y2 - y1 ) < Math.abs( x2 - x1 ) ) {\n      // slope is less than 1\n      if ( x1 > x2 ) {\n        this._drawLineLow( x2, y2, x1, y1, paletteId );\n      }\n      else {\n        this._drawLineLow( x1, y1, x2, y2, paletteId );\n      }\n    }\n    else {\n      // slope is greater than 1\n      if ( y1 > y2 ) {\n        this._drawLineHigh( x2, y2, x1, y1, paletteId );\n      }\n      else {\n        this._drawLineHigh( x1, y1, x2, y2, paletteId );\n      }\n    }\n  }\n\n  /**\n   * Draw a line with a slope less than or equal to 1\n   */\n  _drawLineLow( x1, y1, x2, y2, id ) {\n    const dx = x2 - x1;\n    let dy = y2 - y1;\n    let yIncrement = 1;\n    if ( dy < 0 ) {\n      yIncrement = -1;\n      dy = -dy;\n    }\n\n    let decision = 2 * dy - dx;\n    let y = y1;\n\n    for ( let x = x1; x <= x2; x += 1 ) {\n      this.setPixel( x, y, id );\n\n      if ( decision > 0 ) {\n        y += yIncrement;\n        decision = decision - ( 2 * dx );\n      }\n\n      decision = decision + ( 2 * dy );\n    }\n  }\n\n  /**\n   * Draw a line with a slope greater than 1\n   */\n  _drawLineHigh( x1, y1, x2, y2, id ) {\n    let dx = x2 - x1;\n    const dy = y2 - y1;\n    let xIncrement = 1;\n    if ( dx < 0 ) {\n      xIncrement = -1;\n      dx = -dx;\n    }\n\n    let decision = 2 * dx - dy;\n    let x = x1;\n\n    for ( let y = y1; y <= y2; y += 1 ) {\n      this.setPixel( x, y, id );\n\n      if ( decision > 0 ) {\n        x += xIncrement;\n        decision = decision - ( 2 * dy );\n      }\n\n      decision = decision + ( 2 * dx );\n    }\n  }\n\n  /**\n   * Draw a filled rectangle\n   *\n   * @param {*} x - bottom left x position\n   * @param {*} y - bottom left y position\n   * @param {*} width - width of the rectangle\n   * @param {*} height - height of the rectangle\n   * @param {*} paletteId - the palette color to draw\n   */\n  drawRect( x, y, width, height, paletteId ) {\n    if ( x >= this.width ) {\n      return;\n    }\n\n    if ( y >= this.height ) {\n      return;\n    }\n\n    let x1 = x;\n    let y1 = y;\n    let x2 = x + width - 1;\n    let y2 = y + height - 1;\n\n    if ( x2 < 0 ) {\n      return;\n    }\n    if ( y2 < 0 ) {\n      return;\n    }\n\n    if ( x1 < 0 ) {\n      x1 = 0;\n    }\n    if ( y1 < 0 ) {\n      y1 = 0;\n    }\n\n    if ( x2 >= this.width ) {\n      x2 = this.width - 1;\n    }\n\n    if ( y2 >= this.height ) {\n      y2 = this.height - 1;\n    }\n\n    for ( let currentY = y1; currentY <= y2; currentY += 1 ) {\n      for ( let currentX = x1; currentX <= x2; currentX += 1 ) {\n        this.setPixelUnsafe( currentX, currentY, paletteId );\n      }\n    }\n  }\n\n  /**\n   * Draw a rectangle border\n   *\n   * @param {*} x - bottom left x position\n   * @param {*} y - bottom left y position\n   * @param {*} width - width of the rectangle\n   * @param {*} height - height of the rectangle\n   * @param {*} paletteId - the palette color to draw\n   */\n  drawRectBorder( x, y, width, height, paletteId ) {\n    if ( x >= this.width ) {\n      return;\n    }\n\n    if ( y >= this.height ) {\n      return;\n    }\n\n    if ( width === 1 && height === 1 ) {\n      this.setPixel( x, y, paletteId );\n      return;\n    }\n\n    const x2 = x + width - 1;\n    const y2 = y + height - 1;\n\n    if ( x2 < 0 ) {\n      return;\n    }\n    if ( y2 < 0 ) {\n      return;\n    }\n\n    if ( width === 1 ) {\n      this.drawLine( x, y, x, y2, paletteId );\n      return;\n    }\n\n    if ( height === 1 ) {\n      this.drawLine( x, y, x2, y, paletteId );\n      return;\n    }\n\n    this.drawLine( x, y, x, y2, paletteId ); // left\n    this.drawLine( x, y2, x2, y2, paletteId ); // top\n    this.drawLine( x2, y2, x2, y, paletteId ); // right\n    this.drawLine( x2, y, x, y, paletteId ); // bottom\n  }\n\n  /**\n   * Draw a filled circle\n   *\n   * @param {number} centerX - the x coordinate of the center of the circle\n   * @param {numbe} centerY -  the y coordinate of the center of the circle\n   * @param {number} radius - the radius of the circle\n   * @param {number} paletteId - the palette color to draw\n   */\n  drawCircle( centerX, centerY, radius, paletteId ) {\n    if ( radius <= 0 ) {\n      return;\n    }\n\n    if ( radius === 1 ) {\n      this.drawCircleBorder( centerX, centerY, radius, paletteId );\n      this.setPixel( centerX, centerY, paletteId );\n      return;\n    }\n\n    let x = 0;\n    let y = radius;\n    this.drawLine( centerX - radius, centerY, centerX + radius, centerY, paletteId );\n\n    let decision = 3 - 2 * radius;\n\n    while ( y >= x ) {\n      x += 1;\n\n      if ( decision > 0 ) {\n        y -= 1;\n        decision = decision + 4 * ( x - y ) + 10;\n      }\n      else {\n        decision = decision + 4 * x + 6;\n      }\n\n      this._drawCircleFilledOctants( centerX, centerY, x, y, paletteId );\n    }\n  }\n\n  /**\n   * Draw a circle border\n   *\n   * @param {number} centerX - the x coordinate of the center of the circle\n   * @param {numbe} centerY -  the y coordinate of the center of the circle\n   * @param {number} radius - the radius of the circle\n   * @param {number} paletteId - the palette color to draw\n   */\n  drawCircleBorder( centerX, centerY, radius, paletteId ) {\n    if ( radius <= 0 ) {\n      return;\n    }\n\n    let x = 0;\n    let y = radius;\n    this._drawCircleBorderOctants( centerX, centerY, x, y, paletteId );\n\n    let decision = 3 - 2 * radius;\n\n    while ( y >= x ) {\n      x += 1;\n\n      if ( decision > 0 ) {\n        y -= 1;\n        decision = decision + 4 * ( x - y ) + 10;\n      }\n      else {\n        decision = decision + 4 * x + 6;\n      }\n\n      this._drawCircleBorderOctants( centerX, centerY, x, y, paletteId );\n    }\n  }\n\n  /**\n   * helper method for drawing filled circles\n   */\n  _drawCircleFilledOctants( centerX, centerY, x, y, paletteId ) {\n    this.drawLine( centerX - x, centerY + y, centerX + x, centerY + y, paletteId );\n    this.drawLine( centerX - x, centerY - y, centerX + x, centerY - y, paletteId );\n    this.drawLine( centerX - y, centerY + x, centerX + y, centerY + x, paletteId );\n    this.drawLine( centerX - y, centerY - x, centerX + y, centerY - x, paletteId );\n  }\n\n  /**\n   * helper method for drawing circle borders\n   */\n  _drawCircleBorderOctants( centerX, centerY, x, y, paletteId ) {\n    this.setPixel( centerX + x, centerY + y, paletteId );\n    this.setPixel( centerX - x, centerY + y, paletteId );\n    this.setPixel( centerX + x, centerY - y, paletteId );\n    this.setPixel( centerX - x, centerY - y, paletteId );\n    this.setPixel( centerX + y, centerY + x, paletteId );\n    this.setPixel( centerX - y, centerY + x, paletteId );\n    this.setPixel( centerX + y, centerY - x, paletteId );\n    this.setPixel( centerX - y, centerY - x, paletteId );\n  }\n\n  /**\n   * Draw a tile\n   * @param {number} gid - the gid of the tile\n   * @param {number} x - the x position on the screen\n   * @param {number} y - the y position on the screen\n   * @param {number} flip - should we flip the tile? 0: no, 1: x, 2: y, 3: xy\n   * @param {number} rotate - The number of degrees to rotate. Only 90 degree increments are supported.\n   */\n  drawTile( gid, x, y, flip = 0, rotate = 0 ) {\n    if ( !gid ) {\n      return;\n    }\n\n    if ( x >= this.width ) {\n      return;\n    }\n\n    if ( y >= this.height ) {\n      return;\n    }\n\n    const { tileSize } = this.tileData;\n\n    if ( x + tileSize < 0 ) {\n      return;\n    }\n\n    if ( y + tileSize < 0 ) {\n      return;\n    }\n\n    const flipX = flip === 1 || flip === 3;\n    const flipY = flip === 2 || flip === 3;\n\n    let xIndex = 0;\n    let yIndex = 0;\n\n    // only rotate in 90 degree increments\n    let rotValue = 0;\n    if ( rotate === 90 || rotate === -270 ) {\n      rotValue = 1;\n    }\n    else if ( rotate === 180 || rotate === -180 ) {\n      rotValue = 2;\n    }\n    else if ( rotate === 270 || rotate === -90 ) {\n      rotValue = 3;\n    }\n\n    const basePosition = ( gid - 1 ) * tileSize * tileSize;\n    for ( let tileY = 0; tileY < tileSize; tileY += 1 ) {\n      for ( let tileX = 0; tileX < tileSize; tileX += 1 ) {\n        if ( flipX ) {\n          xIndex = tileSize - tileX - 1;\n        }\n        else {\n          xIndex = tileX;\n        }\n\n        if ( flipY ) {\n          yIndex = tileSize - tileY - 1;\n        }\n        else {\n          yIndex = tileY;\n        }\n\n        const paletteId = this.tileData.data[basePosition + yIndex * tileSize + xIndex];\n\n        if ( rotValue === 3 ) {\n          // 270\n          this.setPixel( x + tileSize - tileY - 1, y + tileX, paletteId );\n        }\n        else if ( rotValue === 2 ) {\n          // 180\n          this.setPixel( x + tileSize - tileX - 1, y + tileSize - tileY - 1, paletteId );\n        }\n        else if ( rotValue === 1 ) {\n          // 90\n          this.setPixel( x + tileY, y + tileSize - tileX - 1, paletteId );\n        }\n        else {\n          this.setPixel( x + tileX, y + tileY, paletteId );\n        }\n      }\n    }\n  }\n\n  /**\n   * Draw a TileMap layer to the screen\n   * @param {number} x - origin x position on the TileMap\n   * @param {number} y - origin y position on the TileMap\n   * @param {number} width - how many tiles wide to draw, -1 is the width of the Tile Map\n   * @param {number} height - how many tiles high to draw, -1 is the height of the Tile Map\n   * @param {number} screenX - origin x position on the screen\n   * @param {number} screenY - origin y position on the screen\n   * @param {number} map - the index of the tilemap to draw\n   * @param {number} layer - the index of the layer to draw\n   */\n  drawMap( x, y, width = -1, height = -1, screenX = 0, screenY = 0, map = 0, layer = 0 ) {\n    const tileMap = this.mapData.tileMaps[map];\n    const layerData = tileMap.layers[layer];\n    const { tileSize } = this.tileData;\n    let maxX = x + width - 1;\n    let maxY = y + height - 1;\n\n    if ( maxX >= tileMap.width || width < 0 ) {\n      maxX = tileMap.width - 1;\n    }\n    if ( maxY >= tileMap.height || height < 0 ) {\n      maxY = tileMap.height - 1;\n    }\n\n    const offsetX = x * tileSize;\n    const offsetY = y * tileSize;\n\n    for ( let currentY = y; currentY <= maxY; currentY += 1 ) {\n      for ( let currentX = x; currentX <= maxX; currentX += 1 ) {\n        const gid = layerData[currentY * tileMap.width + currentX];\n        if ( gid ) {\n          this.drawTile(\n            gid,\n            screenX + currentX * tileSize - offsetX,\n            screenY + currentY * tileSize - offsetY,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Draw a line of text to the screen.\n   * Newlines are not supported, this will draw just a single line\n   * @param {string} text - the text to draw\n   * @param {number} x - the x position on the screen to draw to\n   * @param {number} y - the y position on the screen to draw to\n   * @param {number} paletteId - the palette if for the main color\n   * @param {number} outlinePaletteId - the palette id for the outline color\n   * @param {number} font - the index of the font to use\n   */\n  drawText( text, x, y, paletteId, outlinePaletteId = 0, font = 0 ) {\n    const currentFont = this.fontData.fonts[font];\n    let currentX = x;\n    for ( let i = 0; i < text.length; i += 1 ) {\n      const charCode = text.charCodeAt( i );\n      this.drawChar( charCode, currentX, y, paletteId, outlinePaletteId, font );\n      currentX += currentFont.widthForChar( charCode );\n      currentX += currentFont.letterSpacing;\n    }\n  }\n\n  /**\n   * Draw an individual character to the screen\n   * @param {number} charCode - the unicode point to draw\n   * @param {number} x - the x position on the screen to draw to\n   * @param {number} y - the y position on the screen to draw to\n   * @param {number} paletteId - the palette id for the main color\n   * @param {number} outlinePaletteId - the palette id for the outline color\n   * @param {number} font - the index of the font to use\n   */\n  drawChar( charCode, x, y, paletteId, outlinePaletteId = 0, font = 0 ) {\n    const currentFont = this.fontData.fonts[font];\n    const { tileSize, originX, originY } = currentFont;\n    const basePosition = currentFont.baseIndexForChar( charCode );\n    for ( let fontY = 0; fontY < tileSize; fontY += 1 ) {\n      for ( let fontX = 0; fontX < tileSize; fontX += 1 ) {\n        const id = currentFont.data[basePosition + fontY * tileSize + fontX];\n        if ( id === 1 ) {\n          this.setPixel( x + fontX - originX, y + fontY - originY, paletteId );\n        }\n        else if ( id === 2 ) {\n          this.setPixel( x + fontX - originX, y + fontY - originY, outlinePaletteId );\n        }\n      }\n    }\n  }\n\n  /**\n   * draw the data from {@link _screenData} to the canvas\n   */\n  drawScreen() {\n    const buffer = new ArrayBuffer( this._imageData.data.length );\n    const data8 = new Uint8ClampedArray( buffer );\n    const data32 = new Uint32Array( buffer );\n\n    let index = 0;\n    let screenY = 0;\n    for ( let y = 0; y < this.height; y += 1 ) {\n      for ( let x = 0; x < this.width; x += 1 ) {\n        screenY = this.height - y - 1; // origin from top left to bottom left\n        index = this._screenData[screenY * this.width + x];\n        data32[y * this.width + x] = this._generatedPalette[index];\n      }\n    }\n    this._imageData.data.set( data8 );\n    this._context.putImageData( this._imageData, 0, 0 );\n  }\n}\n\nScreen.SCALE_CONSTANT = 1;\nScreen.SCALE_FIT_WINDOW = 2;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Screen);\n\n\n//# sourceURL=webpack://bitmelo/./src/Screen/Screen.js?");

/***/ }),

/***/ "./src/Screen/standardPalette.js":
/*!***************************************!*\
  !*** ./src/Screen/standardPalette.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n  '000000',\n  '0b0711',\n  'eaf2de',\n  '766e76',\n  '561f6e',\n  '7d4f31',\n  'e98c49',\n  'fbc0a0',\n  'f681b2',\n  'd83232',\n  'e3e962',\n  '65cf57',\n  '2ba957',\n  '187575',\n  '1e2cB0',\n  '2379e5',\n  '95cae5',\n]);\n\n\n//# sourceURL=webpack://bitmelo/./src/Screen/standardPalette.js?");

/***/ }),

/***/ "./src/TileData/TileData.js":
/*!**********************************!*\
  !*** ./src/TileData/TileData.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Holds all of the tile data.\n */\nclass TileData {\n  constructor() {\n    /**\n     * The size of each tile in pixels.\n     * Used for both width and height.\n     */\n    this.tileSize = 16;\n    /**\n     * Array of tileset data.\n     * All tiledata is added to this.data when init is called.\n     * More tilesets can not be added after this.\n     */\n    this.tilesets = [];\n    /**\n     * All of the tile data in a single Uint8ClampedArray.\n     * This is whats used by Screen to draw tiles.\n     */\n    this.data = null;\n  }\n\n  /**\n   * Parse all of the tilesets and add them to the data array\n   */\n  init() {\n    let numberOfTiles = 0;\n    for ( let i = 0; i < this.tilesets.length; i += 1 ) {\n      const currentTileset = this.tilesets[i];\n      numberOfTiles += currentTileset.width * currentTileset.height;\n    }\n    this.data = new Uint8ClampedArray( numberOfTiles * this.tileSize * this.tileSize );\n\n    let startPosition = 0;\n    let firstGid = 1;\n    for ( let i = 0; i < this.tilesets.length; i += 1 ) {\n      const currentTileset = this.tilesets[i];\n      currentTileset.firstGid = firstGid;\n      const { data } = currentTileset;\n      if ( currentTileset.format === 'array' ) {\n        for ( let j = 0; j < data.length; j += 1 ) {\n          this.data[startPosition + j] = parseInt( data[j], 10 );\n        }\n      }\n      else if ( currentTileset.format === 'run' ) {\n        let runPosition = 0;\n        let dataPosition = 0;\n        while ( runPosition < data.length ) {\n          const runLength = data[runPosition];\n          const paletteId = parseInt( data[runPosition + 1], 10 );\n          for ( let j = 0; j < runLength; j += 1 ) {\n            this.data[startPosition + dataPosition] = paletteId;\n            dataPosition += 1;\n          }\n          runPosition += 2;\n        }\n      }\n      firstGid += currentTileset.width * currentTileset.height;\n      startPosition += currentTileset.width * currentTileset.height * this.tileSize * this.tileSize;\n\n      // data is not longer needed in the current tileset as it has been added to this.data.\n      delete currentTileset.data;\n    }\n  }\n\n  /**\n   * Add a tileset.\n   * All tilesets must be added before init is called.\n   * @param {Object} tileset - the tileset data\n   */\n  addTileset( tileset ) {\n    this.tilesets.push( tileset );\n  }\n\n  /**\n   * Get the GID for a tile\n   * @param {number} x - x position of the tile\n   * @param {number} y - y position of the tile\n   * @param {number} tileset - the index of the tileset\n   */\n  getGid( x, y, tileset = 0 ) {\n    if ( x < 0 || y < 0 ) {\n      return -1;\n    }\n    const currentTileset = this.tilesets[tileset];\n    const { width, height, firstGid } = currentTileset;\n    if ( x >= width || y >= height ) {\n      return -1;\n    }\n    return y * width + x + firstGid;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (TileData);\n\n\n//# sourceURL=webpack://bitmelo/./src/TileData/TileData.js?");

/***/ }),

/***/ "./src/libIndex.js":
/*!*************************!*\
  !*** ./src/libIndex.js ***!
  \*************************/
/*! exports provided: Audio, Frequencies, Notes, Sound, ConvertProject, ConvertData, Font, FontData, Input, Keys, MapData, TileMap, Engine, Screen, standardPalette, TileData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Audio_Audio__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Audio/Audio */ \"./src/Audio/Audio.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Audio\", function() { return _Audio_Audio__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _Audio_Frequencies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Audio/Frequencies */ \"./src/Audio/Frequencies.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Frequencies\", function() { return _Audio_Frequencies__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _Audio_Notes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Audio/Notes */ \"./src/Audio/Notes.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Notes\", function() { return _Audio_Notes__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _Audio_Sound__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Audio/Sound */ \"./src/Audio/Sound.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Sound\", function() { return _Audio_Sound__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _ConvertProject_ConvertProject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ConvertProject/ConvertProject */ \"./src/ConvertProject/ConvertProject.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConvertProject\", function() { return _ConvertProject_ConvertProject__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ConvertData/ConvertData */ \"./src/ConvertData/ConvertData.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConvertData\", function() { return _ConvertData_ConvertData__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _FontData_Font__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./FontData/Font */ \"./src/FontData/Font.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Font\", function() { return _FontData_Font__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _FontData_FontData__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./FontData/FontData */ \"./src/FontData/FontData.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FontData\", function() { return _FontData_FontData__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _Input_Input__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Input/Input */ \"./src/Input/Input.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Input\", function() { return _Input_Input__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; });\n\n/* harmony import */ var _Input_Keys__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Input/Keys */ \"./src/Input/Keys.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Keys\", function() { return _Input_Keys__WEBPACK_IMPORTED_MODULE_9__[\"default\"]; });\n\n/* harmony import */ var _MapData_MapData__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./MapData/MapData */ \"./src/MapData/MapData.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MapData\", function() { return _MapData_MapData__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; });\n\n/* harmony import */ var _MapData_TileMap__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./MapData/TileMap */ \"./src/MapData/TileMap.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TileMap\", function() { return _MapData_TileMap__WEBPACK_IMPORTED_MODULE_11__[\"default\"]; });\n\n/* harmony import */ var _Engine_Engine__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Engine/Engine */ \"./src/Engine/Engine.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Engine\", function() { return _Engine_Engine__WEBPACK_IMPORTED_MODULE_12__[\"default\"]; });\n\n/* harmony import */ var _Screen_Screen__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Screen/Screen */ \"./src/Screen/Screen.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Screen\", function() { return _Screen_Screen__WEBPACK_IMPORTED_MODULE_13__[\"default\"]; });\n\n/* harmony import */ var _Screen_standardPalette__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Screen/standardPalette */ \"./src/Screen/standardPalette.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"standardPalette\", function() { return _Screen_standardPalette__WEBPACK_IMPORTED_MODULE_14__[\"default\"]; });\n\n/* harmony import */ var _TileData_TileData__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./TileData/TileData */ \"./src/TileData/TileData.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TileData\", function() { return _TileData_TileData__WEBPACK_IMPORTED_MODULE_15__[\"default\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://bitmelo/./src/libIndex.js?");

/***/ }),

/***/ "./src/lz-string/libs/lz-string.js":
/*!*****************************************!*\
  !*** ./src/lz-string/libs/lz-string.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (true) {\n  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return LZString; }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else {}\n\n\n//# sourceURL=webpack://bitmelo/./src/lz-string/libs/lz-string.js?");

/***/ })

/******/ });
});